[{"id":0,"href":"/Contributing/Developing-Qob/","title":"🔨 Developing Qob","parent":"Contributing","content":" 🚩 Prerequisites 📝 Building 📈 Testing 🚩 Prerequisites To make changes to Qob, you should have:\nSBCL for the lisp implementation. Make for the build system. Quicklisp for CL package manager. 📝 Building To build the development environment, you would have to install Qob using the build from source method. Make sure you have set up the environment PATH variable, so you can call qob from the terminal.\nAfter you have stepped through the installation, try:\n$ qob locate It should print out the location of the qob executable. You should be able to identify the Qob executable\u0026rsquo;s location, even you have multiple Qob versions installed!\n📈 Testing Qob does not offer local testing, all our tests are accomplished using GitHub Actions. Please fork our repository, and push your changes to your fork. GitHub Actions should pick up the test for you!\nMake sure you have GitHub Actions enabled in your repository (forked). Got to Settings -\u0026gt; Actions -\u0026gt; General -\u0026gt; Actions Permissions; make sure you have checked the correct options.\n","description":" 🚩 Prerequisites 📝 Building 📈 Testing 🚩 Prerequisites To make changes to Qob, you should have:\nSBCL for the lisp implementation. Make for the build system. Quicklisp for CL package manager. 📝 Building To build the development environment, you would have to install Qob using the build from source method. Make sure you have set up the environment PATH variable, so you can call qob from the terminal.\n"},{"id":1,"href":"/Getting-Started/Quick-Start/","title":"🔰 Quick Start","parent":"Getting Started","content":" Step 1: Setup NodeJS runtime and npm Step 2: Install Eask Step 3: Navigate to an existing project or create a new project Step 4: Create Eask-file Step 5: Start the package development Step 6: Manage package archives Step 7: Add some dependencies Step 8: Install dependencies See Also Using Eask as your Emacs package management tool.\nThe installation are cross-platform, using npm. For instructions about how to install Eask with other methods, see install.\nIt is required to have Git installed to run this tutorial.\nStep 1: Setup NodeJS runtime and npm Please check out their official site here and install NodeJS and npm corresponds to your current operating system\n💡 If you don\u0026rsquo;t prefer NodeJS and npm, you can install with binary from our release page. Step 2: Install Eask $ npm install -g @emacs-eask/cli To verify your new installation:\n$ eask --version Step 3: Navigate to an existing project or create a new project If you already have an existing elisp project, navigate to the project root folder.\n$ cd /path/to/project/dir/ To create one:\n$ eask create package project-name It should create a folder named project-name in your current working directory.\nStep 4: Create Eask-file Skip this step if you chose to create the project with eask create!\nOtherwise, to create Eask-file in the existing project:\n$ eask init You will be asked some questions about the package you are going to create:\npackage name: (your-project) version: (1.0.0) description: Your project description! entry point: (your-project.el) emacs version: (26.1) website: https://example.com/project-url/ keywords: tools example About to write to /path/to/project/Eask: (package \u0026#34;your-project\u0026#34; \u0026#34;1.0.0\u0026#34; \u0026#34;Your project description!\u0026#34;) (website-url \u0026#34;https://example.com/project-url/\u0026#34;) (keywords \u0026#34;tools\u0026#34; \u0026#34;example\u0026#34;) (package-file \u0026#34;your-project.el\u0026#34;) (script \u0026#34;test\u0026#34; \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;) (source \u0026#34;gnu\u0026#34;) (depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) Is this OK? (yes) yes ⏎ You should be able to see an Eask file in your project folder. 🎉🎊\nStep 5: Start the package development To check your package information, run:\n$ eask info You should be able to see the following information:\nyour-package (1.0.0) | deps: 0 | devDeps: 0 Your project description! https://example.com/project-url/ keywords: tools, example entry: your-package-file.el kind: single dist .total-files: 0 .unpacked-size: 0 From the start, you would not have any dependencies and devDependencies (0 by default)!\nStep 6: Manage package archives You can manage package archives by using the source directive in your Eask-file.\n(source \u0026#34;gnu\u0026#34;) ; default (source \u0026#34;melpa\u0026#34;) ; Add package archives 💡 See DSL/source for more information! Step 7: Add some dependencies You can add dependencies by using depends-on directive in your Eask-file.\n... (depends-on \u0026#34;f\u0026#34;) (depends-on \u0026#34;ht\u0026#34;) 💡 Make sure the dependencies you add are available in the package archives!\nOr else you would get an error `package-name-\u0026rsquo; is unavailable!\nStep 8: Install dependencies Now we can install the dependencies we have specified in the Eask-file:\n$ eask install-deps You should see Eask executed correctly with the similar output below:\nLoading package information... done Installing 2 package dependencies... - Installing f (20220405.1534)... done - Installing ht (20210119.741)... done (Total of 2 dependencies installed, 0 skipped) See Also Commands and options Domain Specific Language Basic Usage ","description":" Step 1: Setup NodeJS runtime and npm Step 2: Install Eask Step 3: Navigate to an existing project or create a new project Step 4: Create Eask-file Step 5: Start the package development Step 6: Manage package archives Step 7: Add some dependencies Step 8: Install dependencies See Also Using Eask as your Emacs package management tool.\nThe installation are cross-platform, using npm. For instructions about how to install Eask with other methods, see install.\n"},{"id":2,"href":"/Getting-Started/","title":"Getting Started","parent":"","content":"","description":""},{"id":3,"href":"/Getting-Started/Finding-Lisp/","title":"🔭 Finding Lisp","parent":"Getting Started","content":"By default, packages are installed for the default Emacs, i.e., the one behind the emacs command. To pick a different Emacs, set the environment variable EMACS to the command name or executable path of the Emacs to use:\n$ EMACS=\u0026#34;emacs26.1\u0026#34; eask command Note that installed dependencies are scoped on the version of Emacs. So when switching between versions you will have to install the dependencies for each:\n$ EMACS=\u0026#34;emacs26.3\u0026#34; eask install There are, unfortunately, circumstances under which Emacs itself resets the EMACS variable in a way which conflicts with eask, in which case you can use the environment variable EASK_EMACS instead. Specifically, this problem effects: Emacs-26, for M-x compile, M-x shell or M-x term, for Emacs-27 and Emacs-28 only for M-x term.\n","description":"By default, packages are installed for the default Emacs, i.e., the one behind the emacs command. To pick a different Emacs, set the environment variable EMACS to the command name or executable path of the Emacs to use:\n$ EMACS=\u0026#34;emacs26.1\u0026#34; eask command Note that installed dependencies are scoped on the version of Emacs. So when switching between versions you will have to install the dependencies for each:\n$ EMACS=\u0026#34;emacs26.3\u0026#34; eask install There are, unfortunately, circumstances under which Emacs itself resets the EMACS variable in a way which conflicts with eask, in which case you can use the environment variable EASK_EMACS instead. Specifically, this problem effects: Emacs-26, for M-x compile, M-x shell or M-x term, for Emacs-27 and Emacs-28 only for M-x term.\n"},{"id":4,"href":"/Getting-Started/Install-Qob/","title":"💾 Install Qob","parent":"Getting Started","content":"This document guides you through the installation of Qob.\nInstall Qob on macOS, Linux, Windows, BSD, and on any machine that can run the [Node.js][].\n💾 Prebuilt binaries 💾 Using Shell 💾 Package managers 📦 Homebrew (macOS or Linux) 📦 MacPorts (macOS) 📦 Debian (Linux) 📦 Snap (Linux) 📦 Arch (Linux) 📦 Chocolatey (Windows) 📦 Scoop (Windows) 📦 Winget (Windows) 💾 Build from source 🚩 Prerequisite Tools 🏡 Setup (through executable) 💾 Prebuilt binaries Download the appropriate version for your platform from Qob Releases. Once downloaded, the binary can be run from anywhere. You don’t need to install it in a global location. This works well for shared hosts and other systems where you don’t have a privileged account.\nIdeally, you should install it somewhere in your PATH for easy use. /usr/local/bin is the most probable location.\n💾 Using Shell On macOS or Linux:\n$ curl -fsSL https://raw.githubusercontent.com/cl-qob/cli/master/webinstall/install.sh | sh On Windows:\n$ curl.exe -fsSL https://raw.githubusercontent.com/cl-qob/cli/master/webinstall/install.bat | cmd /Q 💾 Package managers 📦 Homebrew (macOS or Linux) Homebrew is a free and open-source package manager for macOS and Linux. To install the Qob CLI:\n$ brew tap cl-qob/cli https://github.com/cl-qob/packaging $ brew install qob-cli 📦 MacPorts (macOS) MacPorts is a free and open-source package manager for macOS. To install the Qob CLI:\n$ sudo port install qob-cli 📦 Debian (Linux) Derivatives of the Debian distribution of Linux include elementary OS, KDE neon, Linux Lite, Linux Mint, MX Linux, Pop!_OS, Ubuntu, Zorin OS, and others.\n$ sudo curl -SsL -o /etc/apt/trusted.gpg.d/qobsource.gpg https://raw.githubusercontent.com/cl-qob/packaging/master/debian/KEY.gpg $ sudo curl -SsL -o /etc/apt/sources.list.d/qobsource.list https://raw.githubusercontent.com/cl-qob/packaging/master/debian/qobsource.list $ sudo apt update --allow-insecure-repositories $ sudo apt install qob-cli --allow-unauthenticated You can also download Debian packages from the packaging repo.\n📦 Snap (Linux) Snap is a free and open-source package manager for Linux. Available for most distributions, snap packages are simple to install and are automatically updated.\n$ sudo snap install qob-cli 📦 Arch (Linux) There\u0026rsquo;s a PKGBUILD that builds qob from sources and creates a package, so inside the top directory of the repository you can simply run:\n$ makepkg -i 📦 Chocolatey (Windows) If you have Chocolatey installed on your machine, you can install Qob with the following one-liner:\n$ choco install qob-cli 📦 Scoop (Windows) Scoop is a free and open-source package manager for Windows. To install the Qob CLI:\n$ scoop bucket add cl-qob/cli https://github.com/cl-qob/packaging $ scoop install qob-cli 📦 Winget (Windows) Winget is Microsoft’s official free and open-source package manager for Windows. To install the Qob CLI:\n$ winget install qob.cli 💾 Build from source 🚩 Prerequisite Tools Git SBCL Quicklisp Alternatively, you can clone it directly from this repo\n# clone the repo $ git clone https://github.com/cl-qob/cli qob-cli # change the working directory to qob-cli $ cd qob-cli # build executable to `bin` folder $ make build 🏡 Setup (through executable) You can now run qob using the executable bin/qob; add /path/to/qob-cli/bin/ to your environment PATH to execute qob from any location!\nOn Linux/macOS,\nexport PATH=\u0026#34;path/to/qob-cli/bin:$PATH\u0026#34; On Windows,\nset PATH=%PATH%;c:/path/to/qob-cli/bin Once you have set it up correctly, try qob --version then you should see the current qob\u0026rsquo;s version number! 🎉 🎊\n","description":"This document guides you through the installation of Qob.\nInstall Qob on macOS, Linux, Windows, BSD, and on any machine that can run the [Node.js][].\n💾 Prebuilt binaries 💾 Using Shell 💾 Package managers 📦 Homebrew (macOS or Linux) 📦 MacPorts (macOS) 📦 Debian (Linux) 📦 Snap (Linux) 📦 Arch (Linux) 📦 Chocolatey (Windows) 📦 Scoop (Windows) 📦 Winget (Windows) 💾 Build from source 🚩 Prerequisite Tools 🏡 Setup (through executable) 💾 Prebuilt binaries Download the appropriate version for your platform from Qob Releases. Once downloaded, the binary can be run from anywhere. You don’t need to install it in a global location. This works well for shared hosts and other systems where you don’t have a privileged account.\n"},{"id":5,"href":"/Getting-Started/Basic-Usage/","title":"🔨 Basic Usage","parent":"Getting Started","content":"Qob’s CLI is fully featured but simple to use, even for those who have very limited experience working from the command line.\nThe following is a description of the most common commands you will use while developing your Common Lisp project. See the Commands and options for a comprehensive view of Qob’s CLI.\nOnce you have installed Qob, make sure it is in your PATH. You can test that Qob has been installed correctly via the help command:\n$ qob --help 💡 Optionally, you can use --show-hidden to show all available commands and options! The output you see in your console should be similar to the following:\nNAME: qob - CLI for building, running, testing, and managing your Common Lisp dependencies USAGE: qob [global-options] [\u0026lt;command\u0026gt;] [command-options] [arguments ...] OPTIONS: --help display usage information and exit --no-color enable/disable color output --version display version and exit -a, --all enable all flag -g, --global change default workspace to ~/.qob/ -v, --verbose \u0026lt;INT\u0026gt; set verbosity from 0 to 5 [default: 3] COMMANDS: build Build the executable clean Delete various files produced during building create Create a new Common Lisp project dists List out all installed dists info Display information about the current system(s) install Install systems install-deps Automatically install system dependencies install-dists Install dists list List the registered system status Display the state of the workspace uninstall Uninstall systems AUTHORS: Jen-Chieh Shen \u0026lt;jcs090218@gmail.com\u0026gt; LICENSE: MIT 🗃️ The qob Command The most common usage is probably to run eask with your current directory being the input directory. Then you run eask followed by a subcommand:\n$ Qob info # Print out Eask-file information Notice the subcommand can be nested:\n$ Qob clean workspace # Deletes your `.Qob` folder Pass in option --help to look up more information regarding the command you are using:\n$ qob clean --help The output, and it shows there are 7 subcommands supported:\nDelete various files produced during building Usage: eask clean \u0026lt;type\u0026gt; [options..] Commands: clean all Do all cleaning tasks [aliases: everything] clean autoloads Remove generated autoloads file clean dist [destination] Delete dist subdirectory [aliases: distribution] clean elc Remove byte compiled files generated by eask compile clean log-file Remove all generated log files clean pkg-file Remove generated pkg-file clean workspace Clean up .eask directory [aliases: .eask] Positionals: \u0026lt;type\u0026gt; type of the cleaning task ... Here is a list of known nested subcommands:\neask create eask clean eask generate eask generate workflow eask link eask lint eask run eask source eask test 📌 Knowing your quicklisp directory Qob creates an isolated environment, so it won\u0026rsquo;t create any side effects after playing, testing, and running your elisp packages. But it\u0026rsquo;s important to know what elpa directory (you can think of this as your .emacs.d) the current Eask session is pointing to, so you can release the full potential of this tool!\nHere is how Eask works behind the scene in different scenarios:\nName Description Options Path local The default behavior, use Eask as package dev tool n/a ./.eask config Use Eask as your package manager (It can be used as a test tool too) -c or --config ~/.emacs.d global Use Eask as a general tool, it\u0026rsquo;s unrelated to other scopes -g or --global ~/.eask You might think of why these rules are created.\nIt\u0026rsquo;s easy to understand config and local scopes since many other build tools use the local scope to create an isolated environment. The config scope is an additional feature for people who prefer managing their packages with an external tool and not by built-in package.el or config base straight.el, so you can save up startup time to check if packages are installed for your Emacs to operate.\nSo what is the global scope in terms of Eask? Why it\u0026rsquo;s needed?\nEask is more than a build tool now. Several commands don\u0026rsquo;t require their dependencies as package dependencies. For example, the cat command:\n$ eask cat [PATTERNS..] cat is a simple command that mimics Linux\u0026rsquo;s default cat command, but it does the syntax highlighting for you! How it\u0026rsquo;s implemented? The command relies on an external package e2ansi, and this is neither the package nor config dependency (it could be, but let\u0026rsquo;s assume we don\u0026rsquo;t want it).\nHow do we use this command without side effects to your project or personal emacs configuration? The global scope is introduced for this problem. Now we can add any useful commands without worrying your environment got messed up.\nHere is the flowchart describes Eask\u0026rsquo;s lifecycle:\nBy default, Eask uses your current directory as your workspace since most of the time you would just want to operate jobs for your elisp packages.\n","description":"Qob’s CLI is fully featured but simple to use, even for those who have very limited experience working from the command line.\nThe following is a description of the most common commands you will use while developing your Common Lisp project. See the Commands and options for a comprehensive view of Qob’s CLI.\nOnce you have installed Qob, make sure it is in your PATH. You can test that Qob has been installed correctly via the help command:\n"},{"id":6,"href":"/Getting-Started/Commands-and-options/","title":"🚩 Commands and options","parent":"Getting Started","content":" 🚩 Creating 🔍 eask create package 🔍 eask create elpa 🚩 Core 🔍 eask init 🔍 eask info 🔍 eask status 🔍 eask install-deps 🔍 eask install 🔍 eask uninstall 🔍 eask package 🔍 eask compile 🔍 eask recompile 🔍 eask package-directory 🔍 eask path 🔍 eask load-path 🔍 eask files 🔍 eask recipe 🔍 eask keywords 🔍 eask bump 🔍 eask cat 🔍 eask concat 🔍 eask loc 🚩 Documentation 🔍 eask docs 🚩 Execution 🔍 eask load 🔍 eask exec 🔍 eask emacs 🔍 eask eval 🔍 eask repl 🔍 eask run script 🔍 eask run command 🔍 eask docker 🚩 Management 🔍 eask archives 🔍 eask search 🔍 eask upgrade 🔍 eask list 🔍 eask outdated 🔍 eask refresh 🚩 Generating 🔍 eask generate autoloads 🔍 eask generate pkg-file 🔍 eask generate recipe 🔍 eask generate license 🔍 eask generate ignore 🔍 eask generate test ert 🔍 eask generate test ert-runner 🔍 eask generate test buttercup 🔍 eask generate test ecukes 🔍 eask generate workflow circle-ci 🔍 eask generate workflow github 🔍 eask generate workflow gitlab 🔍 eask generate workflow travis-ci 🚩 Linking 🔍 eask link add 🔍 eask link delete 🔍 eask link list 🚩 Cleaning 🔍 eask clean workspace 🔍 eask clean elc 🔍 eask clean dist 🔍 eask clean autoloads 🔍 eask clean pkg-file 🔍 eask clean log-file 🔍 eask clean all 🚩 Linting 🔍 eask lint package 🔍 eask lint checkdoc 🔍 eask lint elint 🔍 eask lint elisp-lint 🔍 eask lint elsa 🔍 eask lint indent 🔍 eask lint keywords 🔍 eask lint license 🔍 eask lint declare 🔍 eask lint regexps 🚩 Testing 🔍 eask test activate 🔍 eask test ert 🔍 eask test ert-runner 🔍 eask test buttercup 🔍 eask test ecukes 🔍 eask test melpazoid 🚩 Formatting 🔍 eask format elisp-autofmt 🔍 eask format elfmt 🚩 Control DSL 🔍 eask source add 🔍 eask source delete 🔍 eask source list 🚩 Utilities 🔍 eask upgrade-eask 🔍 eask locate 🚩 Checker 🔍 eask analyze 🚩 Global Options 🔍 \u0026ndash;global, -g 🔍 \u0026ndash;config, -c 🔍 \u0026ndash;all, -a 🔍 \u0026ndash;quick, -q 🔍 \u0026ndash;force, -f 🔍 \u0026ndash;debug 🔍 \u0026ndash;strict 🔍 \u0026ndash;allow-error 🔍 \u0026ndash;insecure 🔍 \u0026ndash;timestamps 🔍 \u0026ndash;log-level 🔍 \u0026ndash;log-file, \u0026ndash;lf 🔍 \u0026ndash;no-color 🔍 \u0026ndash;elapsed-time, \u0026ndash;et 🔍 \u0026ndash;verbose, -v \u0026lt;integer\u0026gt; 🔍 \u0026ndash;version 🔍 \u0026ndash;help 🚩 Proxy Options 🔍 \u0026ndash;proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;http-proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;https-proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;no-proxy \u0026lt;pattern\u0026gt; The general syntax of the eask program is:\n$ eask [GLOBAL-OPTIONS] [COMMAND] [COMMAND-OPTIONS] [COMMAND-ARGUMENTS] 🚩 Creating 🔍 eask create package Create a new elisp project with the default Eask-file and CI/CD support.\n$ eask [GLOBAL-OPTIONS] create package \u0026lt;name\u0026gt; 💡 The template project is located in https://github.com/emacs-eask/template-elisp 🔍 eask create elpa Create a new ELPA using github-elpa.\n$ eask [GLOBAL-OPTIONS] create elpa \u0026lt;name\u0026gt; 💡 The template project is located in https://github.com/emacs-eask/template-elpa 🚩 Core Often use commands that are uncategorized.\n🔍 eask init Initialize the current directory to start using Eask.\n$ eask [GLOBAL-OPTIONS] init Eask will generate the file like this:\n(package \u0026#34;PACKAGE-NAME\u0026#34; \u0026#34;VERSION\u0026#34; \u0026#34;YOUR PACKAGE SUMMARY\u0026#34;) (website-url \u0026#34;https://example.com/project-url/\u0026#34;) (keywords \u0026#34;KEYWORD1\u0026#34; \u0026#34;KEYWORD2\u0026#34;) (package-file \u0026#34;PACKAGE-FILE\u0026#34;) (script \u0026#34;test\u0026#34; \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;) (source \u0026#34;gnu\u0026#34;) (depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) [RECOMMENDED] If you already have an elisp project, you can convert the .el file to Eask-file:\n$ eask init --from source /path/to/source.el If you already have a Cask project, you can convert Cask-file to Eask-file:\n$ eask init --from cask /path/to/Cask If you already have a Eldev project, you can convert Eldev-file to Eask-file:\n$ eask init --from eldev /path/to/Eldev If you already have a Keg project, you can convert Keg-file to Eask-file:\n$ eask init --from keg /path/to/Keg 💡 See section Examples for more Eask-file examples! 🔍 eask info Show information about the project or configuration.\n$ eask [GLOBAL-OPTIONS] info 🔍 eask status Display the state of the workspace.\n$ eask [GLOBAL-OPTIONS] status 🔍 eask install-deps To install all dependencies.\nAlias: install-dependencies, prepare\n$ eask [GLOBAL-OPTIONS] install-deps [--dev] 💡 Specify option [\u0026ndash;dev] to install dependencies from the development scope. 🔍 eask install To install packages.\n$ eask [GLOBAL-OPTIONS] install [PACKAGES..] Install packages by specifying arguments:\n$ eask install auto-complete helm magit Or else, it will install the package from the current development:\n$ eask install 🔍 eask uninstall To uninstall/delete packages.\n$ eask [GLOBAL-OPTIONS] uninstall [PACKAGES..] Uninstall packages by specifying arguments:\n$ eask uninstall dash f s Or else, it will uninstall the package from the current development:\n$ eask uninstall 🔍 eask package Build the package artifact.\nAlias: pack\n$ eask package [DESTINATION] If [DESTINATION] is not specified, it will generate to the /dist folder by default.\n🔍 eask compile Byte-compile .el files.\n$ eask compile [FILES..] Compile files by specifying arguments:\n$ eask compile file-1.el file-2.el Or compile files that are already specified in your Eask-file.\n$ eask compile 🔍 eask recompile Byte-recompile .el files.\n$ eask recompile [FILES..] 💡 Similar to eask compile, but it will also remove old .elc files before compiling. 🔍 eask package-directory Print path to package directory, where all dependencies are installed.\n$ eask [GLOBAL-OPTIONS] package-directory 🔍 eask path Print the PATH environment variable of this project.\nAlias: exec-path\n$ eask [GLOBAL-OPTIONS] path [PATTERNS..] Optionally, you can pass in [PATTERNS..] to perform the search.\n🔍 eask load-path Print the load path containing the dependencies of the current project.\n$ eask [GLOBAL-OPTIONS] load-path [PATTERNS..] Optionally, you can pass in [PATTERNS..] to perform the search.\n🔍 eask files Print the list of all package files.\n$ eask [GLOBAL-OPTIONS] files [PATTERNS..] If [PATTERNS..] are defined, it will display files that match that pattern.\n🔍 eask recipe Suggest a recipe format.\n$ eask [GLOBAL-OPTIONS] recipe [FILES..] 🔍 eask keywords List available keywords that can be used in the header section.\n$ eask [GLOBAL-OPTIONS] keywords 🔍 eask bump Bump version for your project and/or Eask-file.\n$ eask [GLOBAL-OPTIONS] bump [LEVELS..] 💡 Argument [LEVELS..] accepts major, minor and/or patch! 🔍 eask cat View filename(s).\nThe positional argument [PATTERNS..] is an array of wildcard patterns.\n$ eask [GLOBAL-OPTIONS] cat [PATTERNS..] 💡 This command uses the package e2ansi to accomplish the syntax highlighting. 🔍 eask concat Concatenate all Emacs Lisp files into one file.\n$ eask [GLOBAL-OPTIONS] concat [FILES..] 🔍 eask loc Print LOC information.\n$ eask [GLOBAL-OPTIONS] loc [FILES..] 🚩 Documentation Commands used to build documentation site.\n🔍 eask docs Build documentation.\n$ eask [GLOBAL-OPTIONS] docs [NAMES..] 🚩 Execution Commands allow you to execute on top of the Eask core.\nBasically, this allows you to do anything you want!\n🔍 eask load Load Emacs Lisp files in order.\n$ eask [GLOBAL-OPTIONS] load [FILES..] 🔍 eask exec Execute the system command with the given arguments.\n$ eask [GLOBAL-OPTIONS] exec [COMMAND] [ARGUMENTS ...] 🔍 eask emacs Execute emacs with the appropriate environment.\n$ eask [GLOBAL-OPTIONS] emacs [ARGUMENTS ...] 🔍 eask eval Evaluate FORM as a lisp form.\n$ eask [GLOBAL-OPTIONS] eval [FORM] 🔍 eask repl Start the Elisp REPL.\n$ eask [GLOBAL-OPTIONS] repl [FILES..] Alias: ielm\n🔍 eask run script Run the script.\n$ eask [GLOBAL-OPTIONS] run script [NAMES..] 🔍 eask run command Run the command.\nAlias: cmd\n$ eask [GLOBAL-OPTIONS] run command [NAMES..] 🔍 eask docker Launch specified Emacs version in a Docker container.\n$ eask [GLOBAL-OPTIONS] docker \u0026lt;VERSION\u0026gt; [ARGUMENTS ...] For example:\n$ eask docker 26.1 info This is the same as jumping right into Emacs 26.1 (in docker) and executing eask info.\n🚩 Management Commands that help you manage your package\u0026rsquo;s dependencies.\n🔍 eask archives List out all package archives.\n$ eask [GLOBAL-OPTIONS] archives 🔍 eask search Search packages from archives.\n$ eask [GLOBAL-OPTIONS] search [QUEIRES..] 🔍 eask upgrade Upgrade all packages.\n$ eask [GLOBAL-OPTIONS] upgrade 🔍 eask list List packages.\n$ eask [GLOBAL-OPTIONS] list [--depth] 🔍 eask outdated List out all outdated packages.\n$ eask [GLOBAL-OPTIONS] outdated [--depth] 🔍 eask refresh Download package archives.\n$ eask [GLOBAL-OPTIONS] refresh 🚩 Generating Generate files that are used for the development.\n🔍 eask generate autoloads Generate autoload file.\nWrite a package autoloads to project-autoloads.el in the project root.\n$ eask [GLOBAL-OPTIONS] generate autoloads project is the project name, as declared in Eask-file. See Multi-file Packages (elisp) for details.\n🔍 eask generate pkg-file Generate pkg file.\nWrite a package descriptor file to project-pkg.el in the project root.\nAlias: pkg, pkg-el\n$ eask [GLOBAL-OPTIONS] generate pkg-file project is the project name, as declared in Eask-file. See Multi-file Packages (elisp) for details.\n🔍 eask generate recipe Generate recipe file.\n$ eask [GLOBAL-OPTIONS] generate recipe [DESTINATION] If [DESTINATION] is not specified, it will generate to the /recipes folder by default.\n🔍 eask generate license Generate LICENSE file.\n$ eask [GLOBAL-OPTIONS] generate license \u0026lt;name\u0026gt; name is the type of the license, see https://api.github.com/licenses for all the choices.\n💡 This command uses the package license-templates to generate ignore file. 🔍 eask generate ignore Generate ignore file.\n$ eask [GLOBAL-OPTIONS] generate ignore \u0026lt;name\u0026gt; 💡 This command uses the package gitignore-templates to generate ignore file. 🔍 eask generate test ert Create a new test project for the ert tests.\n$ eask [GLOBAL-OPTIONS] generate test ert [NAMES..] 🔍 eask generate test ert-runner Create a new test project for the ert-runner.\n$ eask [GLOBAL-OPTIONS] generate test ert-runner [NAMES..] 🔍 eask generate test buttercup Create a new Buttercup setup for the project.\n$ eask [GLOBAL-OPTIONS] generate test buttercup 🔍 eask generate test ecukes Create a new Ecukes setup for the project.\n$ eask [GLOBAL-OPTIONS] generate test ecukes 🔍 eask generate workflow circle-ci Generate CircleCI workflow yaml file.\nThe default filename is config.yml.\n$ eask [GLOBAL-OPTIONS] generate workflow circle-ci [--file] This will generate the yaml file under .circleci/!\n🔍 eask generate workflow github Generate GitHub Actions workflow yaml file.\nThe default filename is test.yml.\n$ eask [GLOBAL-OPTIONS] generate workflow github [--file] This will generate the yaml file under .github/workflow/!\n🔍 eask generate workflow gitlab Generate GitLab Runner workflow yaml file.\nThe default filename is .gitlab-ci.yml.\n$ eask [GLOBAL-OPTIONS] generate workflow gitlab [--file] 🔍 eask generate workflow travis-ci Generate Travis CI workflow yaml file.\nThe default filename is .travis.yml.\n$ eask [GLOBAL-OPTIONS] generate workflow travis-ci [--file] 🚩 Linking Link between this package and a dependency on the local filesystem. A linked dependency avoids the need to download a dependency from a remote archive. The package linked to must either have a Eask-file or a -pkg.el-file.\n🔍 eask link add Links the given source directory into the package directory of this project, under the given package name.\n$ eask [GLOBAL-OPTIONS] link add \u0026lt;NAME\u0026gt; \u0026lt;PATH\u0026gt; 🔍 eask link delete Deletes the link for the given packages.\nAlias: remove\n$ eask [GLOBAL-OPTIONS] link delete [NAMES..] 🔍 eask link list List all links.\n$ eask [GLOBAL-OPTIONS] link list 🚩 Cleaning Delete various files produced during building.\n🔍 eask clean workspace Delete .eask from the current workspace.\nAlias: .eask\n$ eask [GLOBAL-OPTIONS] clean workspace ⛔️ Don\u0026rsquo;t specify the option --config, -c, or else it will delete your entire ~/.emacs.d.\n$ eask clean workspace -g 🔍 eask clean elc Delete all .elc files. This would respect to your Eask file.\n$ eask [GLOBAL-OPTIONS] clean elc 🔍 eask clean dist Delete dist subdirectory.\nAlias: distribution\n$ eask [GLOBAL-OPTIONS] clean dist 🔍 eask clean autoloads Remove generated autoloads file.\n$ eask [GLOBAL-OPTIONS] clean autoloads 🔍 eask clean pkg-file Remove generated pkg-file.\n$ eask [GLOBAL-OPTIONS] clean pkg-file 🔍 eask clean log-file Remove all generated log files.\n$ eask [GLOBAL-OPTIONS] clean log-file 🔍 eask clean all This command is the combination of all other clean commands.\nclean workspace clean elc clean dist clean autoloads clean pkg-file clean log-file Alias: everything\n$ eask [GLOBAL-OPTIONS] clean all 🚩 Linting Commands that lint your Emacs package.\n🔍 eask lint package Run package-lint.\n$ eask [GLOBAL-OPTIONS] lint package [FILES..] 🔍 eask lint checkdoc Run checkdoc (built-in).\n$ eask [GLOBAL-OPTIONS] lint checkdoc [FILES..] 🔍 eask lint elint Run elint (built-in).\n$ eask [GLOBAL-OPTIONS] lint elint [FILES..] 🔍 eask lint elisp-lint Run elisp-lint.\n$ eask [GLOBAL-OPTIONS] lint elisp-lint [FILES..] This does respect the .dir-locals.el file! 🎉\n🔍 eask lint elsa Run elsa.\n$ eask [GLOBAL-OPTIONS] lint lint elsa [FILES..] 🔍 eask lint indent Run indent-lint.\n$ eask [GLOBAL-OPTIONS] lint indent [FILES..] 🔍 eask lint keywords Run keywords checker (built-in).\n$ eask [GLOBAL-OPTIONS] lint keywords 🔍 eask lint license Run license check.\n$ eask [GLOBAL-OPTIONS] lint license 🔍 eask lint declare Run check-declare (built-in).\n$ eask [GLOBAL-OPTIONS] lint declare [FILES..] 🔍 eask lint regexps Run relint.\nAlias: lint relint\n$ eask [GLOBAL-OPTIONS] lint regexps [FILES..] 🚩 Testing Run regression/unit tests.\n🔍 eask test activate Activate package; use to test the package activation\n$ eask [GLOBAL-OPTIONS] activate [FILES..] 💡 You can pass in [FILES..] so you can test your package activation fully!\n[FILES..] will be loaded after the package is activated.\n🔍 eask test ert Run ert tests.\n$ eask [GLOBAL-OPTIONS] test ert [FILES..] 🔍 eask test ert-runner Run ert test using ert-runner.\n$ eask [GLOBAL-OPTIONS] test ert-runner 🔍 eask test buttercup Run buttercup tests.\n$ eask [GLOBAL-OPTIONS] test buttercup 🔍 eask test ecukes Run ecukes tests.\n$ eask [GLOBAL-OPTIONS] test ecukes [FILES..] 🔍 eask test melpazoid Run melpazoid tests.\n$ eask [GLOBAL-OPTIONS] test melpazoid [DIRECTORIES..] 💡 If [DIRECTORIES..] is not passed in; it will use the current workspace instead. 🚩 Formatting Commands that formats your Emacs source files.\n🔍 eask format elisp-autofmt Run elisp-autofmt formatter.\n$ eask [GLOBAL-OPTIONS] format elisp-autofmt [FILES..] 🔍 eask format elfmt Run elfmt formatter.\n$ eask [GLOBAL-OPTIONS] format elfmt [FILES..] 🚩 Control DSL List of commands that control DSL.\n🔍 eask source add Add an archive source.\n$ eask [GLOBAL-OPTIONS] source add \u0026lt;NAME\u0026gt; [URL] 🔍 eask source delete Remove an archive source.\nAlias: remove\n$ eask [GLOBAL-OPTIONS] source delete \u0026lt;NAME\u0026gt; 🔍 eask source list List all source information.\n$ eask [GLOBAL-OPTIONS] source list 💡 This command is the same as $ eask archives! 🚩 Utilities Other helper commands.\n🔍 eask upgrade-eask Upgrade Eask to the latest version.\nAlias: upgrade-self\n$ eask [GLOBAL-OPTIONS] upgrade-eask 💡 This will only work if you install it from the source! 🔍 eask locate Show Eask installed location.\n$ eask [GLOBAL-OPTIONS] locate 🚩 Checker Commands to check your Eask-file.\n🔍 eask analyze Lint an Eask-file.\n$ eask [GLOBAL-OPTIONS] analyze [FILES..] Example:\n# lint all Eask-files in the current directory and subdirectories eask analyze # lint specific files eask analyze Eask Eask.27 # lint all Eask-files in specified directory and subdirectories eask analyze src/ # print result as JSON eask analyze --json For more detail, run eask analyze --help.\n🚩 Global Options The following options are available on all Eask commands:\n🔍 \u0026ndash;global, -g This will use ~/.eask/ instead of the package development environment.\nThis is used for other tasks. e.g., cat, etc.\n$ eask -g [COMMAND] 🔍 \u0026ndash;config, -c This will use ~/.emacs.d/ instead of the package development environment.\nThis is used for doing stuff for your Emacs configuration. e.g., package management, etc.\n$ eask -c [COMMAND] 🔍 \u0026ndash;all, -a Enable the all flag.\n$ eask -a [COMMAND] 🔍 \u0026ndash;quick, -q Start cleanly without loading the configuration files.\n$ eask -q [COMMAND] 🔍 \u0026ndash;force, -f Force command\u0026rsquo;s execution.\nForce to uninstall the package dash even it\u0026rsquo;s a dependency from another packages.\n$ eask -f [COMMAND] 🔍 \u0026ndash;debug Enable debug information.\nThis is equivalent to:\n(setq debug-on-error t) 🔍 \u0026ndash;strict Trigger error instead of warnings.\nFor instance, in eask compile:\n(setq byte-compile-error-on-warn t) 🔍 \u0026ndash;allow-error Continue the execution without killing the Emacs.\n🔍 \u0026ndash;insecure Connect archives with HTTP instead of HTTPS.\n🔍 \u0026ndash;timestamps Enable/Disable timestamps.\n🔍 \u0026ndash;log-level Enable/Disable log header.\n🔍 \u0026ndash;log-file, \u0026ndash;lf Weather to generate log files.\n🔍 \u0026ndash;no-color Disable color output.\n🔍 \u0026ndash;elapsed-time, \u0026ndash;et Show elapsed time between each operation.\n🔍 \u0026ndash;verbose, -v \u0026lt;integer\u0026gt; Set verbosity from 0 to 5.\n$ eask --verbose 4 [COMMAND] 🔍 \u0026ndash;version Show version number.\n🔍 \u0026ndash;help Show help.\n🚩 Proxy Options 🔍 \u0026ndash;proxy \u0026lt;proxy\u0026gt; Set Emacs proxy for HTTP and HTTPS:\n$ eask --proxy \u0026#34;localhost:8888\u0026#34; [COMMAND] 🔍 \u0026ndash;http-proxy \u0026lt;proxy\u0026gt; Set Emacs proxy for HTTP only.\n🔍 \u0026ndash;https-proxy \u0026lt;proxy\u0026gt; Set Emacs proxy for HTTPS only.\n🔍 \u0026ndash;no-proxy \u0026lt;pattern\u0026gt; Do not use a proxy for any URL matching pattern.\n\u0026lt;pattern\u0026gt;is an Emacs regular expression.\n","description":" 🚩 Creating 🔍 eask create package 🔍 eask create elpa 🚩 Core 🔍 eask init 🔍 eask info 🔍 eask status 🔍 eask install-deps 🔍 eask install 🔍 eask uninstall 🔍 eask package 🔍 eask compile 🔍 eask recompile 🔍 eask package-directory 🔍 eask path 🔍 eask load-path 🔍 eask files 🔍 eask recipe 🔍 eask keywords 🔍 eask bump 🔍 eask cat 🔍 eask concat 🔍 eask loc 🚩 Documentation 🔍 eask docs 🚩 Execution 🔍 eask load 🔍 eask exec 🔍 eask emacs 🔍 eask eval 🔍 eask repl 🔍 eask run script 🔍 eask run command 🔍 eask docker 🚩 Management 🔍 eask archives 🔍 eask search 🔍 eask upgrade 🔍 eask list 🔍 eask outdated 🔍 eask refresh 🚩 Generating 🔍 eask generate autoloads 🔍 eask generate pkg-file 🔍 eask generate recipe 🔍 eask generate license 🔍 eask generate ignore 🔍 eask generate test ert 🔍 eask generate test ert-runner 🔍 eask generate test buttercup 🔍 eask generate test ecukes 🔍 eask generate workflow circle-ci 🔍 eask generate workflow github 🔍 eask generate workflow gitlab 🔍 eask generate workflow travis-ci 🚩 Linking 🔍 eask link add 🔍 eask link delete 🔍 eask link list 🚩 Cleaning 🔍 eask clean workspace 🔍 eask clean elc 🔍 eask clean dist 🔍 eask clean autoloads 🔍 eask clean pkg-file 🔍 eask clean log-file 🔍 eask clean all 🚩 Linting 🔍 eask lint package 🔍 eask lint checkdoc 🔍 eask lint elint 🔍 eask lint elisp-lint 🔍 eask lint elsa 🔍 eask lint indent 🔍 eask lint keywords 🔍 eask lint license 🔍 eask lint declare 🔍 eask lint regexps 🚩 Testing 🔍 eask test activate 🔍 eask test ert 🔍 eask test ert-runner 🔍 eask test buttercup 🔍 eask test ecukes 🔍 eask test melpazoid 🚩 Formatting 🔍 eask format elisp-autofmt 🔍 eask format elfmt 🚩 Control DSL 🔍 eask source add 🔍 eask source delete 🔍 eask source list 🚩 Utilities 🔍 eask upgrade-eask 🔍 eask locate 🚩 Checker 🔍 eask analyze 🚩 Global Options 🔍 \u0026ndash;global, -g 🔍 \u0026ndash;config, -c 🔍 \u0026ndash;all, -a 🔍 \u0026ndash;quick, -q 🔍 \u0026ndash;force, -f 🔍 \u0026ndash;debug 🔍 \u0026ndash;strict 🔍 \u0026ndash;allow-error 🔍 \u0026ndash;insecure 🔍 \u0026ndash;timestamps 🔍 \u0026ndash;log-level 🔍 \u0026ndash;log-file, \u0026ndash;lf 🔍 \u0026ndash;no-color 🔍 \u0026ndash;elapsed-time, \u0026ndash;et 🔍 \u0026ndash;verbose, -v \u0026lt;integer\u0026gt; 🔍 \u0026ndash;version 🔍 \u0026ndash;help 🚩 Proxy Options 🔍 \u0026ndash;proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;http-proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;https-proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;no-proxy \u0026lt;pattern\u0026gt; The general syntax of the eask program is:\n"},{"id":7,"href":"/Getting-Started/Directory-Structure/","title":"🏗️ Directory Structure","parent":"Getting Started","content":" Directory Structure Explained Running the eask create package generator from the command-line will create a directory with the following structure:\n. ├── .gitignore ├── Makefile ├── Eask ├── README.md └── {package-file}.el Directory Structure Explained The following is a high-level overview of each of the files.\n.gitignore\nGitignore file, to ignore files you don\u0026rsquo;t like to include from your repository. By default, it already excludes files and directories that are generated by Eask.\nMakefile\nMakefile that has already included basic tests for your package. It now has the following tasks be default:\nTest build (packaging + installing) Test byte-compile Test checkdoc (style checker) Test lint (package linter) README.md\nThe generated document file. This is used to display the main page from your repository.\n{package-file}.el\nThis is the main package file; where you should write your elisp code. If you attempt to create a multiple-file package; you would need to edit the Eask-file accordingly.\n","description":" Directory Structure Explained Running the eask create package generator from the command-line will create a directory with the following structure:\n. ├── .gitignore ├── Makefile ├── Eask ├── README.md └── {package-file}.el Directory Structure Explained The following is a high-level overview of each of the files.\n.gitignore\nGitignore file, to ignore files you don\u0026rsquo;t like to include from your repository. By default, it already excludes files and directories that are generated by Eask.\n"},{"id":8,"href":"/Getting-Started/Advanced-Usage/","title":"🔧 Advanced Usage","parent":"Getting Started","content":" 🪝 Hooks 📇 Adding your own command Eask is just a regular Emacs Lisp file and should be read from Emacs itself! You can do:\n; Regular Eask file content... (setq byte-compile-error-on-warn t) ; Signal error if warning occurred 🪝 Hooks eask provides some hooks which enable you to execute code before and after each command. The hooks look like so:\neask-before-COMMAND-hook eask-after-COMMAND-hook For example, to consider warnings as errors when byte-compiling with the command eask compile:\n(add-hook \u0026#39;eask-before-compile-hook (lambda () (setq byte-compile-error-on-warn t))) This is also equivalent to option --strict:\n$ eask compile [FILES..] --strict Or hooks that run on every command:\neask-before-command-hook eask-after-command-hook (add-hook \u0026#39;eask-before-command-hook (lambda () (message \u0026#34;%s\u0026#34; (eask-command)))) ; print the current command For subcommands that contain spaces, will concatenate with /:\n$ eask lint checkdoc # lint/checkdoc $ eask generate license # generate/license therefore,\n(add-hook \u0026#39;eask-before-lint/checkdoc-hook (lambda () ;; do stuff before checkdoc linting... )) 📇 Adding your own command You can add your own command through our command interface:\n(eask-defcommand my-test-command \u0026#34;A test command that prints out useless message.\u0026#34; (message \u0026#34;This is a test command!\u0026#34;)) ","description":" 🪝 Hooks 📇 Adding your own command Eask is just a regular Emacs Lisp file and should be read from Emacs itself! You can do:\n; Regular Eask file content... (setq byte-compile-error-on-warn t) ; Signal error if warning occurred 🪝 Hooks eask provides some hooks which enable you to execute code before and after each command. The hooks look like so:\n"},{"id":9,"href":"/Contributing/","title":"Contributing","parent":"","content":"","description":""},{"id":10,"href":"/FAQ/","title":"FAQ","parent":"","content":"Here is a list of general frequently asked questions.\n🔍 About Qob ❓ Who should use this tool? ❓ Where can I download the Qob snapshot? 🔍 Technology Choice ❓ Why clingon? 🔍 About Qob ❓ Who should use this tool? Here are our suggestions; if you plan to work on an OS-specific package (never going to other platforms), go for other tools. On the other hand, Qob aims to provide the best consistency between each OS. Alternatively, if you want to learn a tool that works everywhere, Qob is one of the best choices.\n❓ Where can I download the Qob snapshot? You can download the latest executable (snapshot) in our cl-qob/binaries repository!\n🔍 Technology Choice ❓ Why clingon? There are limited options for command line parsers in Common Lisp, so I opted for the most mature one, which is also recommended by the community.\n","description":"Here is a list of general frequently asked questions.\n🔍 About Qob ❓ Who should use this tool? ❓ Where can I download the Qob snapshot? 🔍 Technology Choice ❓ Why clingon? 🔍 About Qob ❓ Who should use this tool? Here are our suggestions; if you plan to work on an OS-specific package (never going to other platforms), go for other tools. On the other hand, Qob aims to provide the best consistency between each OS. Alternatively, if you want to learn a tool that works everywhere, Qob is one of the best choices.\n"},{"id":11,"href":"/License/","title":"MIT License","parent":"","content":"Licensed under MIT. See below for details.\nCopyright (c) 2024 Jen-Chieh Shen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026#34;Software\u0026#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u0026#34;AS IS\u0026#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ","description":"Licensed under MIT. See below for details.\nCopyright (c) 2024 Jen-Chieh Shen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026#34;Software\u0026#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u0026#34;AS IS\u0026#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. "},{"id":12,"href":"/","title":"","parent":"","content":" CLI for building, running, testing, and managing your Common Lisp dependencies After installing Qob, you can easily develop any Common Lisp package.\nOut of the box, Qob supports 10+ commands to help you throughout development. 🔥\nGetting Started 🏆 Feature overview Successor to Cask Eask is very similar to Cask!\nEask has all the commands from Cask, plus even more!\nOut-of-the-box Eask comes with 10+ built-in linters and test runners, so you don\u0026rsquo;t have to worry about how to use it!\nEask-file is an Elisp file Eask is treated as an Elisp file.\nYou can do anything just like you do in Emacs!\n","description":" CLI for building, running, testing, and managing your Common Lisp dependencies After installing Qob, you can easily develop any Common Lisp package.\nOut of the box, Qob supports 10+ commands to help you throughout development. 🔥\nGetting Started 🏆 Feature overview Successor to Cask Eask is very similar to Cask!\n"},{"id":13,"href":"/Getting-Started/Introduction/","title":"🚪 Introduction","parent":"Getting Started","content":"Eask was built to use as a package development tool in your Elisp packages. But now, Eask supports various types of Emacs Lisp tasks. It can be used in three major ways:\nDev tool for Elisp packages Dependency management for your configuration Run elisp programs for all other purposes So what are the major differences between Eask and other build tools like Cask, makem.sh, and Eldev, other than the things above?\nGood question! Eask is more than a build tool now, it can be used for various purposes! But here are Eask aims to be:\nConsistent enough to sandbox across all systems General enough to have Emacsers frequently used commands (byte-compile, checkdoc, etc) Robust enough to provide useful results even in the presence of user errors Dependency-free so that the tool can be run on any platform P.S. See Why Eask? for more detailed information.\n❓ Why Eask? Eask has the same philosophy as Cask, see their site Why Cask? to understand why you should use Eask (or Cask).\nMany tools like Cask, makem.sh, or Eldev don\u0026rsquo;t \u0026ldquo;really\u0026rdquo; support Windows. Cask has dropped support for Legacy Windows, makem.sh runs on bash, Eldev does support Windows, but the author doesn\u0026rsquo;t use it on Windows (not having full tests, see their CI workflows). Eask aims to adapt all platforms, including Linux, macOS, and Windows. It focuses on the cross-platform capability and the consistency between each OS. If Eask works on your machine, then it will work on any platform.\nHere are our suggestions; if you plan to work on an OS-specific package (never going to other platforms), go for other tools. On the other hand, Eask aims to provide the best consistency between each OS. Alternatively, if you want to learn a tool that works everywhere, Eask is one of the best choices.\n⚖️ Comparisons The table was compiled by reading these projects’ documentation and source code, but the author is not an expert on these tools. Corrections are welcome.\n🔍 Project Wise The table shows what technology has been chosen by their author and how the project is being constructed. Furthermore, what technical decisions have they made? Drop support? Project\u0026rsquo;s layout? Etc.\nEask Cask Eldev makem.sh bin folder binary, bash, bat bash, bat bash, bat, ps1 bash Cross-Platform ✅ ❌, no Windows support ✅ ❌, no Windows support Emacs version 26.1+ 24.5+ 24.4+ 26.1+ Size 9,000+ lines 3,000+ lines 8,000+ lines 1,200+ lines Executable ✅ ❌ ❌ ❌ Pure Elisp ❌, JavaScript ✅ ✅ ✅ CLI Parser yargs commander built-in built-in 💡 makem.sh has a good comparisons document as well, visit their site 🔍 Feature Wise This is the feature comparison between each tool. Every tool has its advantages; choose the right tool that works for you!\nIf the features are not listed below, either it is forgotten or simply considered too essential, so every tool has it; hence we don\u0026rsquo;t add them to the list.\nEask Cask Eldev makem.sh Elisp configuration ✅, DSL is optional ❌, DSL only ✅, pure elisp ❌ Handle archives failure ✅, see archives ❌ ❌ ❌ create project, etc ✅ ❌ ❌ ❌ link local dependencies ✅ ✅ ✅ ❌ exec program ✅ ✅ ❌ ❌ eval expressions ✅ ✅ ✅ ❌ emacs execution ✅ ✅ ❌ ❌ Built-in linters ✅ ❌ ✅ ❌ Built-in tests ✅ ❌ ✅ ❌ Run script ✅ ❌ ❌ ❌ Self-defined commands ✅ ❌ ✅ ❌ Subcommand ✅ ❌ ❌ ❌ 📰 News 0.9.x - Improve UX in general 0.8.x - Add link command 0.7.x - Fix default-directory isn\u0026rsquo;t honored by -g option 0.6.x - You can now use eask create to create an Elisp project 0.5.x - Handle error for failed archive 0.4.x - Add color logger 0.3.x - Add verbosity level and timestamps 0.2.x - Done basic error handling with exit code at the end of executions 0.1.39 - Use spawn instead exec; now messages will be printed immediately 0.1.x - Project bare-bones are pretty much complete! 📝 Todo list 🔍 Development [DEV] Publish package to winget 🔍 Core commands [FEAT] Add publish command; to publish the package to the eask archive? 🔍 Eask-file commands N/A 📂 Underlying Projects The design of Eask was greatly influenced by the following projects:\nCask - Project management tool for Emacs makem.sh - Makefile-like script for building and testing Emacs Lisp packages epm - Emacs Package Manager Eldev - Elisp Development Tool ","description":"Eask was built to use as a package development tool in your Elisp packages. But now, Eask supports various types of Emacs Lisp tasks. It can be used in three major ways:\nDev tool for Elisp packages Dependency management for your configuration Run elisp programs for all other purposes So what are the major differences between Eask and other build tools like Cask, makem.sh, and Eldev, other than the things above?\n"},{"id":14,"href":"/tos/","title":"Legal notice and privacy","parent":"","content":" Contact information Jen-Chieh Shen Email: jcs090219@gmail.com\nPrivacy policy Collection of general data and information The website cl-qob.github.io collects a series of general data and information when a data subject or automated system calls up the website. This general data and information are stored in the server log files. Collected may be:\nthe browser types and versions used the operating system used by the accessing system the website from which an accessing system reaches our website (so-called referrers) the sub-websites the date and time of access to the Internet site an Internet protocol address (IP address) the Internet service provider of the accessing system any other similar data and information that may be used in the event of attacks on our information technology systems When using these general data and information, we do not draw any conclusions about the data subject. Rather, this information is needed to deliver the content of our website correctly and answer your request (Article 6.1b GDPR).\nYour IP address and the requested URL can be stored up to 7 days due to analyze possible problems with the web page. Given that a problem appears there are cases, where it is possible that this information is stored longer than 7 days to analyze the problem in depth. They will be deleted as soon as it is confirmed that they can no further help with diagnosing the problem or the problem is solved. (Article 6.1f GDPR).\nCookies This web page does not use any cookies.\n","description":" Contact information Jen-Chieh Shen Email: jcs090219@gmail.com\nPrivacy policy Collection of general data and information The website cl-qob.github.io collects a series of general data and information when a data subject or automated system calls up the website. This general data and information are stored in the server log files. Collected may be:\nthe browser types and versions used the operating system used by the accessing system the website from which an accessing system reaches our website (so-called referrers) the sub-websites the date and time of access to the Internet site an Internet protocol address (IP address) the Internet service provider of the accessing system any other similar data and information that may be used in the event of attacks on our information technology systems When using these general data and information, we do not draw any conclusions about the data subject. Rather, this information is needed to deliver the content of our website correctly and answer your request (Article 6.1b GDPR).\n"},{"id":15,"href":"/tags/","title":"Tags","parent":"","content":"","description":""}]