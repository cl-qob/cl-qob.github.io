[{"id":0,"href":"/Contributing/Developing-Qob/","title":"🔨 Developing Qob","parent":"Contributing","content":" 🚩 Prerequisites 📝 Building 📈 Testing 🚩 Prerequisites To make changes to Qob, you should have:\nSBCL for the lisp implementation. Make for the build system. Quicklisp for CL package manager. 📝 Building To build the development environment, you would have to install Qob using the build from source method. Make sure you have set up the environment PATH variable, so you can call qob from the terminal.\nAfter you have stepped through the installation, try:\n$ qob locate It should print out the location of the qob executable. You should be able to identify the Qob executable\u0026rsquo;s location, even you have multiple Qob versions installed!\n📈 Testing Qob does not offer local testing, all our tests are accomplished using GitHub Actions. Please fork our repository, and push your changes to your fork. GitHub Actions should pick up the test for you!\nMake sure you have GitHub Actions enabled in your repository (forked). Got to Settings -\u0026gt; Actions -\u0026gt; General -\u0026gt; Actions Permissions; make sure you have checked the correct options.\n","description":" 🚩 Prerequisites 📝 Building 📈 Testing 🚩 Prerequisites To make changes to Qob, you should have:\nSBCL for the lisp implementation. Make for the build system. Quicklisp for CL package manager. 📝 Building To build the development environment, you would have to install Qob using the build from source method. Make sure you have set up the environment PATH variable, so you can call qob from the terminal.\n"},{"id":1,"href":"/Contributing/Documentation/","title":"✒️ Documentation","parent":"Contributing","content":" 🚩 Prerequisites 📐 Setup Qob includes a comprehensive user guide. Please try to extend it accordingly while you implement new features.\nThe documentation is written in Markdown, using Hugo and GitHub Pages. The former is the static site generator, and the latter is the static web pages hosting service from GitHub.\n💡 You can find all our documentation under the docs/content/ folder. 🚩 Prerequisites To make changes to documentation, you should have:\nhugo executable; the static site generator. 📐 Setup To set up the website locally, you need to first install the theme:\n# Clone the repository with submodules... git clone https://github.com/cl-qob/cli --recurse-submodules # Navgiate to `docs/theme/geekdoc` folder cd ./docs/theme/geekdoc/ # Build the themes npm install \u0026amp;\u0026amp; npm run build Then run the hugo command:\n# Navigate back to `docs` folder cd ./docs/ # Run hugo server locally hugo server And that\u0026rsquo;s it! Now you can open the browser with the URL localhost:1313. 🎉\n💡 You can specify -D option if you consider writing a draft. ","description":" 🚩 Prerequisites 📐 Setup Qob includes a comprehensive user guide. Please try to extend it accordingly while you implement new features.\nThe documentation is written in Markdown, using Hugo and GitHub Pages. The former is the static site generator, and the latter is the static web pages hosting service from GitHub.\n💡 You can find all our documentation under the docs/content/ folder. 🚩 Prerequisites To make changes to documentation, you should have:\n"},{"id":2,"href":"/Contributing/PR/","title":"📭 Pull Request","parent":"Contributing","content":"If all tests have passed, and the Qob can operate normally with updated documentation (if any), please send us a pull request with your changes. 🎊\n🧪 Tests Explained This has moved to the repository README.md file.\nPlease visit https://github.com/cl-qob/cli#-testing.\n","description":"If all tests have passed, and the Qob can operate normally with updated documentation (if any), please send us a pull request with your changes. 🎊\n🧪 Tests Explained This has moved to the repository README.md file.\nPlease visit https://github.com/cl-qob/cli#-testing.\n"},{"id":3,"href":"/Getting-Started/Quick-Start/","title":"🔰 Quick Start","parent":"Getting Started","content":" 🔍 Step 1: Download prebuilt binary 🔍 Step 2: Navigate to an existing project or create a new project 🔍 Step 3: Create Qob-file 🔍 Step 4: Start the package development 🔍 Step 5: Manage system dist 🔍 Step 6: Add some dependencies 🔍 Step 7: Install dependencies 🔗 See Also Using Qob as your Lisp system management tool.\nIt is required to have Git installed to run this tutorial. 🔍 Step 1: Download prebuilt binary See the Prebuilt binaries section.\n💡 If you encounter any issue, try Build from source. To verify your new installation:\n$ qob --version 🔍 Step 2: Navigate to an existing project or create a new project If you already have an existing common lisp project, navigate to the project root folder.\n$ cd /path/to/project/dir/ To create one:\n$ qob create cl-project \u0026lt;your-project\u0026gt; It should create a folder named \u0026lt;your-project\u0026gt; in your current working directory.\n🔍 Step 3: Create Qob-file Then, to create Qob-file in the project:\n$ qob init You should be able to see an Qob file in your project folder. 🎉🎊\n🔍 Step 4: Start the package development To check your package information, run:\n$ qob info You should be able to see the following information:\nyour-package (1.0.0) | deps: 0 Your project description! https://example.com/project-url/ Author: Your Name License: MIT From the start, you would not have any dependencies (0 by default)!\n🔍 Step 5: Manage system dist You can manage dist by using the source directive in your Qob-file.\n(source \u0026#34;quicklisp\u0026#34;) ; default dist (source \u0026#34;ultralisp\u0026#34;) ; Addition dist 💡 See DSL/source for more information! 🔍 Step 6: Add some dependencies You can now add dependencies in your ASD file.\n(defsystem \u0026#34;your-project\u0026#34; ... :depends-on (flx str clingon) ; Add dependencies here! ... You can add local dependencies by using depends-on directive in your Qob-file.\n... (depends-on \u0026#34;fsdb\u0026#34; \u0026#34;https://github.com/billstclair/fsdb\u0026#34; :git) 💡 Make sure the dependencies you add are available in one of those dist! 🔍 Step 7: Install dependencies Now we can install the dependencies we have specified in ASD and Qob files:\n$ qob install-deps You should see Qob executed correctly with the similar output below:\nLoading ASDF files... done ✓ Installing 1 system... - [1/1] Installing fsdb from https://github.com/billstclair/fsdb... done ✓ (Total of 1 system installed; 0 skipped) Installing 3 systems... - [1/3] Installing flx (0)... done ✓ - [2/3] Installing str (0)... done ✓ - [3/3] Installing clingon (0)... done ✓ (Total of 3 systems installed; 0 skipped) 🔗 See Also Commands and options Domain Specific Language Basic Usage ","description":" 🔍 Step 1: Download prebuilt binary 🔍 Step 2: Navigate to an existing project or create a new project 🔍 Step 3: Create Qob-file 🔍 Step 4: Start the package development 🔍 Step 5: Manage system dist 🔍 Step 6: Add some dependencies 🔍 Step 7: Install dependencies 🔗 See Also Using Qob as your Lisp system management tool.\nIt is required to have Git installed to run this tutorial. 🔍 Step 1: Download prebuilt binary See the Prebuilt binaries section.\n"},{"id":4,"href":"/Getting-Started/","title":"Getting Started","parent":"","content":"","description":""},{"id":5,"href":"/Getting-Started/Finding-Lisp/","title":"🔭 Finding Lisp","parent":"Getting Started","content":"By default, packages are installed for the default SBCL, i.e., the one behind the sbcl command. To pick a different lisp implementation, set the environment variable QOB_LISP to the command name or executable path of the lisp implementation to use:\nSteel Bank Common Lisp (SBCL):\n$ QOB_LISP=\u0026#34;sbcl-2.2.9\u0026#34; qob command Clozure CL (CCL):\n$ QOB_LISP=\u0026#34;ccl-1.12\u0026#34; qob command Embeddable Common Lisp (ECL):\n$ QOB_LISP=\u0026#34;ecl-1.12\u0026#34; qob command Note that installed dependencies are scoped on the version of the lisp implementation. So when switching between versions you will have to install the dependencies for each:\n$ QOB_LISP=\u0026#34;sbcl-2.2.9\u0026#34; qob install ","description":"By default, packages are installed for the default SBCL, i.e., the one behind the sbcl command. To pick a different lisp implementation, set the environment variable QOB_LISP to the command name or executable path of the lisp implementation to use:\nSteel Bank Common Lisp (SBCL):\n$ QOB_LISP=\u0026#34;sbcl-2.2.9\u0026#34; qob command Clozure CL (CCL):\n$ QOB_LISP=\u0026#34;ccl-1.12\u0026#34; qob command Embeddable Common Lisp (ECL):\n$ QOB_LISP=\u0026#34;ecl-1.12\u0026#34; qob command Note that installed dependencies are scoped on the version of the lisp implementation. So when switching between versions you will have to install the dependencies for each:\n"},{"id":6,"href":"/Getting-Started/Install-Qob/","title":"💾 Install Qob","parent":"Getting Started","content":"This document guides you through the installation of Qob.\nInstall Qob on macOS, Linux, Windows, BSD, and on any machine that can run the [Node.js][].\n💾 Prebuilt binaries 💾 Using Shell 💾 Package managers 📦 Nix (macOS or Linux) 📦 Homebrew (macOS or Linux) 📦 MacPorts (macOS) 📦 Debian (Linux) 📦 Snap (Linux) 📦 Arch (Linux) 📦 Chocolatey (Windows) 📦 Scoop (Windows) 📦 Winget (Windows) 💾 Build from source 🚩 Prerequisite Tools 🏡 Setup (through executable) 💾 Prebuilt binaries Download the appropriate version for your platform from Qob Releases. Once downloaded, the binary can be run from anywhere. You don’t need to install it in a global location. This works well for shared hosts and other systems where you don’t have a privileged account.\nIdeally, you should install it somewhere in your PATH for easy use. /usr/local/bin is the most probable location.\n💾 Using Shell On macOS or Linux:\n$ curl -fsSL https://raw.githubusercontent.com/cl-qob/cli/master/webinstall/install.sh | sh On Windows:\n$ curl.exe -fsSL https://raw.githubusercontent.com/cl-qob/cli/master/webinstall/install.bat | cmd /Q 💾 Package managers 📦 Nix (macOS or Linux) Nix is a free and open-source package manager for macOS and Linux. To install the Qob CLI:\n$ nix profile install nixpkgs#qob-cli 📦 Homebrew (macOS or Linux) Homebrew is a free and open-source package manager for macOS and Linux. To install the Qob CLI:\n$ brew tap cl-qob/cli https://github.com/cl-qob/packaging $ brew install qob-cli 📦 MacPorts (macOS) MacPorts is a free and open-source package manager for macOS. To install the Qob CLI:\n$ sudo port install qob-cli 📦 Debian (Linux) Derivatives of the Debian distribution of Linux include elementary OS, KDE neon, Linux Lite, Linux Mint, MX Linux, Pop!_OS, Ubuntu, Zorin OS, and others.\n$ sudo curl -SsL -o /etc/apt/trusted.gpg.d/qobsource.gpg https://raw.githubusercontent.com/cl-qob/packaging/master/debian/KEY.gpg $ sudo curl -SsL -o /etc/apt/sources.list.d/qobsource.list https://raw.githubusercontent.com/cl-qob/packaging/master/debian/qobsource.list $ sudo apt update --allow-insecure-repositories $ sudo apt install qob-cli --allow-unauthenticated You can also download Debian packages from the packaging repo.\n📦 Snap (Linux) Snap is a free and open-source package manager for Linux. Available for most distributions, snap packages are simple to install and are automatically updated.\n$ sudo snap install qob-cli 📦 Arch (Linux) There\u0026rsquo;s a PKGBUILD that builds qob from sources and creates a package, so inside the top directory of the repository you can simply run:\n$ makepkg -i 📦 Chocolatey (Windows) If you have Chocolatey installed on your machine, you can install Qob with the following one-liner:\n$ choco install qob-cli 📦 Scoop (Windows) Scoop is a free and open-source package manager for Windows. To install the Qob CLI:\n$ scoop bucket add cl-qob/cli https://github.com/cl-qob/packaging $ scoop install qob-cli 📦 Winget (Windows) Winget is Microsoft’s official free and open-source package manager for Windows. To install the Qob CLI:\n$ winget install qob.cli 💾 Build from source 🚩 Prerequisite Tools Git SBCL Quicklisp Alternatively, you can clone it directly from this repo\n# clone the repo $ git clone https://github.com/cl-qob/cli qob-cli # change the working directory to qob-cli $ cd qob-cli # build executable to `bin` folder $ make build 🏡 Setup (through executable) You can now run qob using the executable bin/qob; add /path/to/qob-cli/bin/ to your environment PATH to execute qob from any location!\nOn Linux/macOS,\nexport PATH=\u0026#34;path/to/qob-cli/bin:$PATH\u0026#34; On Windows,\nset PATH=%PATH%;c:/path/to/qob-cli/bin Once you have set it up correctly, try qob --version then you should see the current qob\u0026rsquo;s version number! 🎉 🎊\n","description":"This document guides you through the installation of Qob.\nInstall Qob on macOS, Linux, Windows, BSD, and on any machine that can run the [Node.js][].\n💾 Prebuilt binaries 💾 Using Shell 💾 Package managers 📦 Nix (macOS or Linux) 📦 Homebrew (macOS or Linux) 📦 MacPorts (macOS) 📦 Debian (Linux) 📦 Snap (Linux) 📦 Arch (Linux) 📦 Chocolatey (Windows) 📦 Scoop (Windows) 📦 Winget (Windows) 💾 Build from source 🚩 Prerequisite Tools 🏡 Setup (through executable) 💾 Prebuilt binaries Download the appropriate version for your platform from Qob Releases. Once downloaded, the binary can be run from anywhere. You don’t need to install it in a global location. This works well for shared hosts and other systems where you don’t have a privileged account.\n"},{"id":7,"href":"/Examples/System-Development/","title":"📦 System Development","parent":"Examples","content":"Qob is the magic file that qob will read it as the init file in Lisp implementation.\n;; -*- mode: lisp; lexical-binding: t -*- (files \u0026#34;lisp\u0026#34; \u0026#34;scripts\u0026#34; \u0026#34;Makefile\u0026#34; \u0026#34;LICENSE\u0026#34; \u0026#34;Qob\u0026#34;) (source \u0026#34;quicklisp\u0026#34;) (source \u0026#34;ultralisp\u0026#34;) ","description":"Qob is the magic file that qob will read it as the init file in Lisp implementation.\n;; -*- mode: lisp; lexical-binding: t -*- (files \u0026#34;lisp\u0026#34; \u0026#34;scripts\u0026#34; \u0026#34;Makefile\u0026#34; \u0026#34;LICENSE\u0026#34; \u0026#34;Qob\u0026#34;) (source \u0026#34;quicklisp\u0026#34;) (source \u0026#34;ultralisp\u0026#34;) "},{"id":8,"href":"/DSL/","title":"Domain Specific Language","parent":"","content":"This document provides a reference on the DSL.\n🚩 Package contents 🔍 files (\u0026amp;rest patterns) 🚩 Tests 🔍 script (name command \u0026amp;rest args) 🚩 Dependencies 🔍 source (alias) 🔍 source (name url) 🔍 depends-on (\u0026amp;rest args) 🚩 Package contents 🔍 files (\u0026amp;rest patterns) Specify list of files that are included in this project.\n(files \u0026#34;foo.el\u0026#34;) (files \u0026#34;*.el\u0026#34; \u0026#34;core/*.el\u0026#34;) 🚩 Tests 🔍 script (name command \u0026amp;rest args) Add built-in scripts and their preset life cycle event as well as arbitrary scripts.\n(script \u0026#34;test\u0026#34; \u0026#34;echo This is a test!\u0026#34;) 🚩 Dependencies 🔍 source (alias) 🔍 source (name url) Add a system dist to install dependencies from.\n(source \u0026#34;quicklisp\u0026#34;) (source \u0026#34;quicklisp\u0026#34; \u0026#34;http://beta.quicklisp.org/\u0026#34;) Available aliases:\nquicklisp (http://beta.quicklisp.org/) ultralisp (http://dist.ultralisp.org/) 🔍 depends-on (\u0026amp;rest args) Specify a dependency for this system.\n(depends-on \u0026#34;fsdb\u0026#34; \u0026#34;https://github.com/billstclair/fsdb\u0026#34; :git) 💡 Install dependencies with command qob install-deps! ","description":"This document provides a reference on the DSL.\n🚩 Package contents 🔍 files (\u0026amp;rest patterns) 🚩 Tests 🔍 script (name command \u0026amp;rest args) 🚩 Dependencies 🔍 source (alias) 🔍 source (name url) 🔍 depends-on (\u0026amp;rest args) 🚩 Package contents 🔍 files (\u0026amp;rest patterns) Specify list of files that are included in this project.\n"},{"id":9,"href":"/Getting-Started/Basic-Usage/","title":"🔨 Basic Usage","parent":"Getting Started","content":"Qob’s CLI is fully featured but simple to use, even for those who have very limited experience working from the command line.\nThe following is a description of the most common commands you will use while developing your Common Lisp project. See the Commands and options for a comprehensive view of Qob’s CLI.\nOnce you have installed Qob, make sure it is in your PATH. You can test that Qob has been installed correctly via the help command:\n$ qob --help The output you see in your console should be similar to the following:\nNAME: qob - CLI for building, running, testing, and managing your Common Lisp dependencies USAGE: qob [global-options] [\u0026lt;command\u0026gt;] [command-options] [arguments ...] OPTIONS: --help display usage information and exit --no-color enable/disable color output --version display version and exit -a, --all enable all flag -g, --global change default workspace to ~/.qob/ -v, --verbose \u0026lt;INT\u0026gt; set verbosity from 0 to 5 [default: 3] COMMANDS: build Build the executable clean Delete various files produced during building create Create a new Common Lisp project dists List out all installed dists eval Evaluate lisp form with a proper PATH files Print all system files package Build a system artifact info Display information about the current system(s) init Initialize project to use Qob install Install systems install-deps Automatically install system dependencies install-dists Install dists list List the registered systems load Load lisp files locate Print out Qob installed location status Display the state of the workspace uninstall Uninstall systems AUTHORS: Jen-Chieh Shen \u0026lt;jcs090218@gmail.com\u0026gt; LICENSE: MIT 🗃️ The qob Command The most common usage is probably to run qob with your current directory being the input directory. Then you run qob followed by a subcommand:\n$ qob info # Print out Qob-file information Notice the subcommand can be nested:\n$ qob clean workspace # Deletes your `.qob` folder Pass in option --help to look up more information regarding the command you are using:\n$ qob clean --help The output, and it shows there are 3 subcommands supported:\nNAME: qob clean - Delete various files produced during building USAGE: qob clean \u0026lt;type\u0026gt; OPTIONS: --help display usage information and exit --no-color enable/disable color output --version display version and exit -a, --all enable all flag -g, --global change default workspace to ~/.qob/ -v, --verbose \u0026lt;INT\u0026gt; set verbosity from 0 to 5 [default: 3] COMMANDS: all Do all cleaning tasks dist Delete dist subdirectory workspace, .qob Clean up .qob directory Here is a list of known nested subcommands:\nqob create qob clean 📌 Knowing your quicklisp directory Qob creates an isolated environment, so it won\u0026rsquo;t create any side effects after playing, testing, and running your lisp systems. But it\u0026rsquo;s important to know what quicklisp directory (normally it\u0026rsquo;s the same to ~/quicklisp/) the current Qob session is pointing to, so you can release the full potential of this tool!\nHere is how Qob works behind the scene in different scenarios:\nName Description Options Path local The default behavior, use Qob as system dev tool n/a ./.qob/ global Use Qob as a general tool, it\u0026rsquo;s unrelated to other scopes -g or --global ~/ By default, Qob installs systems in a local scope, isolating your development environment from global systems. This allows you to build Common Lisp applications with pinned versions without polluting your global systems.\nIf the -g or --global option is specified, you can manage your global systems just as you would manage local systems.\n","description":"Qob’s CLI is fully featured but simple to use, even for those who have very limited experience working from the command line.\nThe following is a description of the most common commands you will use while developing your Common Lisp project. See the Commands and options for a comprehensive view of Qob’s CLI.\nOnce you have installed Qob, make sure it is in your PATH. You can test that Qob has been installed correctly via the help command:\n"},{"id":10,"href":"/Getting-Started/Commands-and-options/","title":"🚩 Commands and options","parent":"Getting Started","content":" 🚩 Creating 🔍 qob create cl-project 🚩 Core 🔍 qob init 🔍 qob info 🔍 qob status 🔍 qob install-deps 🔍 qob install 🔍 qob uninstall 🔍 qob package 🔍 qob files 🚩 Execution 🔍 qob load 🔍 qob exec 🔍 qob eval 🚩 Management 🔍 qob dists 🔍 qob install-dists 🔍 qob search 🔍 qob list 🚩 Linking 🔍 qob link add 🔍 qob link delete 🔍 qob link list 🚩 Cleaning 🔍 qob clean workspace 🔍 qob clean dist 🔍 qob clean all 🚩 Utilities 🔍 qob locate 🚩 Global Options 🔍 \u0026ndash;global, -g 🔍 \u0026ndash;all, -a 🔍 \u0026ndash;force, -f 🔍 \u0026ndash;allow-error 🔍 \u0026ndash;timestamps 🔍 \u0026ndash;log-level 🔍 \u0026ndash;log-file, \u0026ndash;lf 🔍 \u0026ndash;no-color 🔍 \u0026ndash;elapsed-time, \u0026ndash;et 🔍 \u0026ndash;verbose, -v \u0026lt;integer\u0026gt; 🔍 \u0026ndash;version 🔍 \u0026ndash;help The general syntax of the qob program is:\n$ qob [GLOBAL-OPTIONS] [COMMAND] [COMMAND-OPTIONS] [COMMAND-ARGUMENTS] 🚩 Creating 🔍 qob create cl-project Create a new Common Lisp project\n$ qob [GLOBAL-OPTIONS] create cl-project \u0026lt;name\u0026gt; 💡 See https://github.com/fukamachi/cl-project for more information. 🚩 Core Often use commands that are uncategorized.\n🔍 qob init Initialize the current directory to start using Qob.\n$ qob [GLOBAL-OPTIONS] init Qob will generate the file like this:\n;; -*- mode: lisp; lexical-binding: t -*- (source \u0026#34;quicklisp\u0026#34;) 🔍 qob info Show information about the project or configuration.\n$ qob [GLOBAL-OPTIONS] info 🔍 qob status Display the state of the workspace.\n$ qob [GLOBAL-OPTIONS] status 🔍 qob install-deps To install all dependencies.\n$ qob [GLOBAL-OPTIONS] install-deps 🔍 qob install To install systems.\n$ qob [GLOBAL-OPTIONS] install [SYSTEMS..] Install systems by specifying arguments:\n$ qob install clingon clack Or else, it will install the system from the current development:\n$ qob install 🔍 qob uninstall To uninstall/delete systems.\n$ qob [GLOBAL-OPTIONS] uninstall [SYSTEMS..] Uninstall systems by specifying arguments:\n$ qob uninstall cl-autorepo cl-project Or else, it will uninstall the system from the current development:\n$ qob uninstall 🔍 qob package Build the system artifact.\n$ qob package [DESTINATION] If [DESTINATION] is not specified, it will generate to the /dist folder by default.\n🔍 qob files Print all system files.\n$ qob files [DESTINATION] 🚩 Execution Commands allow you to execute on top of the Qob core.\nBasically, this allows you to do anything you want!\n🔍 qob load Load Common Lisp files in order.\n$ qob [GLOBAL-OPTIONS] load [FILES..] 🔍 qob exec Execute the system command with the given arguments.\n$ qob [GLOBAL-OPTIONS] exec [COMMAND] [ARGUMENTS ...] 🔍 qob eval Evaluate FORM as a lisp form.\n$ qob [GLOBAL-OPTIONS] eval [FORM] 🚩 Management Commands that help you manage your package\u0026rsquo;s dependencies.\n🔍 qob dists List out all installed dists.\n$ qob [GLOBAL-OPTIONS] dists 🔍 qob install-dists Install dists.\n$ qob [GLOBAL-OPTIONS] install-dists [NAMES..] 🔍 qob search Search systems from archives.\n$ qob [GLOBAL-OPTIONS] search [QUEIRES..] 🔍 qob list List systems.\n$ qob [GLOBAL-OPTIONS] list [--depth] 🚩 Linking Link between this system and a dependency on the local filesystem. A linked dependency avoids the need to download a dependency from a remote archive. The system linked to must either have a Qob-file or a ASD-file.\n🔍 qob link add Links the given source directory into the system directory of this project, under the given system name.\n$ qob [GLOBAL-OPTIONS] link add \u0026lt;NAME\u0026gt; \u0026lt;PATH\u0026gt; 🔍 qob link delete Deletes the link for the given systems.\n$ qob [GLOBAL-OPTIONS] link delete [NAMES..] 🔍 qob link list List all links.\n$ qob [GLOBAL-OPTIONS] link list 🚩 Cleaning Delete various files produced during building.\n🔍 qob clean workspace Delete .qob from the current workspace.\nAlias: .qob\n$ qob [GLOBAL-OPTIONS] clean workspace 🔍 qob clean dist Delete dist subdirectory.\n$ qob [GLOBAL-OPTIONS] clean dist 🔍 qob clean all This command is the combination of all other clean commands.\nclean workspace clean dist $ qob [GLOBAL-OPTIONS] clean all 🚩 Utilities Other helper commands.\n🔍 qob locate Show Qob installed location.\n$ qob [GLOBAL-OPTIONS] locate 🚩 Global Options The following options are available on all Qob commands:\n🔍 \u0026ndash;global, -g This will use ~/.qob/ instead of the package development environment.\nThis is used for other tasks. e.g., cat, etc.\n$ qob -g [COMMAND] 🔍 \u0026ndash;all, -a Enable the all flag.\n$ qob -a [COMMAND] 🔍 \u0026ndash;force, -f Force command\u0026rsquo;s execution.\nForce to uninstall the package dash even it\u0026rsquo;s a dependency from another packages.\n$ qob -f [COMMAND] 🔍 \u0026ndash;allow-error Continue the execution without killing the program.\n🔍 \u0026ndash;timestamps Enable/Disable timestamps.\n🔍 \u0026ndash;log-level Enable/Disable log header.\n🔍 \u0026ndash;log-file, \u0026ndash;lf Weather to generate log files.\n🔍 \u0026ndash;no-color Disable color output.\n🔍 \u0026ndash;elapsed-time, \u0026ndash;et Show elapsed time between each operation.\n🔍 \u0026ndash;verbose, -v \u0026lt;integer\u0026gt; Set verbosity from 0 to 5.\n$ qob --verbose 4 [COMMAND] 🔍 \u0026ndash;version Show version number.\n🔍 \u0026ndash;help Show help.\n","description":" 🚩 Creating 🔍 qob create cl-project 🚩 Core 🔍 qob init 🔍 qob info 🔍 qob status 🔍 qob install-deps 🔍 qob install 🔍 qob uninstall 🔍 qob package 🔍 qob files 🚩 Execution 🔍 qob load 🔍 qob exec 🔍 qob eval 🚩 Management 🔍 qob dists 🔍 qob install-dists 🔍 qob search 🔍 qob list 🚩 Linking 🔍 qob link add 🔍 qob link delete 🔍 qob link list 🚩 Cleaning 🔍 qob clean workspace 🔍 qob clean dist 🔍 qob clean all 🚩 Utilities 🔍 qob locate 🚩 Global Options 🔍 \u0026ndash;global, -g 🔍 \u0026ndash;all, -a 🔍 \u0026ndash;force, -f 🔍 \u0026ndash;allow-error 🔍 \u0026ndash;timestamps 🔍 \u0026ndash;log-level 🔍 \u0026ndash;log-file, \u0026ndash;lf 🔍 \u0026ndash;no-color 🔍 \u0026ndash;elapsed-time, \u0026ndash;et 🔍 \u0026ndash;verbose, -v \u0026lt;integer\u0026gt; 🔍 \u0026ndash;version 🔍 \u0026ndash;help The general syntax of the qob program is:\n"},{"id":11,"href":"/Examples/","title":"Examples","parent":"","content":"","description":""},{"id":12,"href":"/Getting-Started/Directory-Structure/","title":"🏗️ Directory Structure","parent":"Getting Started","content":" 📂 Directory Structure Explained Running the qob create cl-project \u0026lt;project-name\u0026gt; generator from the command-line will create a directory with the following structure:\n. ├─ .gitignore ├─ {package-name}.asd ├─ README.markdown ├─ README.org ├─ src │ └─ main.lisp └─ tests └─ main.lisp 📂 Directory Structure Explained See https://github.com/fukamachi/cl-project for more information.\n","description":" 📂 Directory Structure Explained Running the qob create cl-project \u0026lt;project-name\u0026gt; generator from the command-line will create a directory with the following structure:\n. ├─ .gitignore ├─ {package-name}.asd ├─ README.markdown ├─ README.org ├─ src │ └─ main.lisp └─ tests └─ main.lisp 📂 Directory Structure Explained See https://github.com/fukamachi/cl-project for more information.\n"},{"id":13,"href":"/Getting-Started/Advanced-Usage/","title":"🔧 Advanced Usage","parent":"Getting Started","content":" 🪝 Hooks Qob is just a regular Common Lisp file and should be read from Lisp implementation itself! You can do:\n; Regular Qob file content... (setq qob-enable-color t) ; Display color 🪝 Hooks qob provides some hooks which enable you to execute code before and after each command. The hooks look like so:\nqpb-before-COMMAND-hook qob-after-COMMAND-hook For example, execute certain tasks after the command qob build:\n(qob-add-hook \u0026#39;qob-after-build-hook (lambda () ;; Do tasks after build )) Or hooks that run on every command:\nqob-before-command-hook qob-after-command-hook (qob-add-hook \u0026#39;qob-before-command-hook (lambda () (format T \u0026#34;~A\u0026#34; (qob-command)))) ; print the current command For subcommands that contain spaces, will concatenate with /:\n$ qob clean workspace # clean/workspace $ qob create cl-project # create/cl-project therefore,\n(qob-add-hook \u0026#39;qob-before-clean/workspace-hook (lambda () ;; do stuff before clean workspace... )) ","description":" 🪝 Hooks Qob is just a regular Common Lisp file and should be read from Lisp implementation itself! You can do:\n; Regular Qob file content... (setq qob-enable-color t) ; Display color 🪝 Hooks qob provides some hooks which enable you to execute code before and after each command. The hooks look like so:\n"},{"id":14,"href":"/Contributing/","title":"Contributing","parent":"","content":"","description":""},{"id":15,"href":"/FAQ/","title":"FAQ","parent":"","content":"Here is a list of general frequently asked questions.\n🔍 About Qob ❓ Who should use this tool? ❓ Where can I download the Qob snapshot? 🔍 Technology Choice ❓ Why clingon? 🔍 About Qob ❓ Who should use this tool? Here are our suggestions; if you plan to work on an OS-specific package (never going to other platforms), go for other tools. On the other hand, Qob aims to provide the best consistency between each OS. Alternatively, if you want to learn a tool that works everywhere, Qob is one of the best choices.\n❓ Where can I download the Qob snapshot? You can download the latest executable (snapshot) in our cl-qob/binaries repository!\n🔍 Technology Choice ❓ Why clingon? There are limited options for command line parsers in Common Lisp, so I opted for the most mature one, which is also recommended by the community.\n","description":"Here is a list of general frequently asked questions.\n🔍 About Qob ❓ Who should use this tool? ❓ Where can I download the Qob snapshot? 🔍 Technology Choice ❓ Why clingon? 🔍 About Qob ❓ Who should use this tool? Here are our suggestions; if you plan to work on an OS-specific package (never going to other platforms), go for other tools. On the other hand, Qob aims to provide the best consistency between each OS. Alternatively, if you want to learn a tool that works everywhere, Qob is one of the best choices.\n"},{"id":16,"href":"/License/","title":"MIT License","parent":"","content":"Licensed under MIT. See below for details.\nCopyright (c) 2024 Jen-Chieh Shen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026#34;Software\u0026#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u0026#34;AS IS\u0026#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ","description":"Licensed under MIT. See below for details.\nCopyright (c) 2024 Jen-Chieh Shen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026#34;Software\u0026#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u0026#34;AS IS\u0026#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. "},{"id":17,"href":"/","title":"","parent":"","content":" CLI for building, running, testing, and managing your Common Lisp dependencies After installing Qob, you can easily develop any Common Lisp package.\nOut of the box, Qob supports 10+ commands to help you throughout development. 🔥\nGetting Started 🏆 Feature overview ASDF and Quicklisp Integration Beginners often need clarification about package management in Common Lisp. Having ASDF and Quicklisp built-in can help get things up and running.\nOut-of-the-box Has the most commonly used facilities and aims for the best user experience.\nAlternatives to Roswell and Qlot All-in-one tool so users no longer need to install tools like Roswell and Qlot, which only serve specific goals.\n","description":" CLI for building, running, testing, and managing your Common Lisp dependencies After installing Qob, you can easily develop any Common Lisp package.\nOut of the box, Qob supports 10+ commands to help you throughout development. 🔥\nGetting Started 🏆 Feature overview ASDF and Quicklisp Integration Beginners often need clarification about package management in Common Lisp. Having ASDF and Quicklisp built-in can help get things up and running.\n"},{"id":18,"href":"/Contributing/How-to-Contribute/","title":"❓ How to Contribute","parent":"Contributing","content":" ⚜️ Code of Conduct 🪑 Open Development 📌 Semantic Versioning 💡 Branch Organization 📂 State of the project ⚜️ Code of Conduct We have adopted the Contributor Covenant as its Code of Conduct, and we expect project participants to adhere to it. Please read the full text so that you can understand what actions will and will not be tolerated.\n🪑 Open Development All work on Qob happens directly on GitHub. Both core team members and external contributors send pull requests which go through the same review process.\n📌 Semantic Versioning Qob follows semantic versioning. We release patch versions for critical bugfixes, minor versions for new features or non-essential changes, and major versions for any breaking changes. When we make breaking changes, we also introduce deprecation warnings in a minor version so that our users learn about the upcoming changes and migrate their code in advance.\nEvery significant change is documented in the changelog file.\n💡 Branch Organization Submit all changes directly to the master branch. We don’t use separate branches for development or for upcoming releases. We do our best to keep master in good shape, with all tests passing.\nCode that lands in master must be compatible with the latest stable release. It may contain additional features, but no breaking changes. We should be able to release a new minor version from the tip of master at any time.\n📂 State of the project The project\u0026rsquo;s bare-bones are pretty much done, we are currently looking for contributors to give us feedback and improve our TUI/UX for this tool!\nWe are also looking for advice to add more. Common Lisper often use commands and options, so these features are prepared by default!\n","description":" ⚜️ Code of Conduct 🪑 Open Development 📌 Semantic Versioning 💡 Branch Organization 📂 State of the project ⚜️ Code of Conduct We have adopted the Contributor Covenant as its Code of Conduct, and we expect project participants to adhere to it. Please read the full text so that you can understand what actions will and will not be tolerated.\n"},{"id":19,"href":"/Getting-Started/Introduction/","title":"🚪 Introduction","parent":"Getting Started","content":"Eask was built to use as a package development tool in your Elisp packages. But now, Eask supports various types of Emacs Lisp tasks. It can be used in three major ways:\nDev tool for Elisp packages Dependency management for your configuration Run elisp programs for all other purposes So what are the major differences between Eask and other build tools like Cask, makem.sh, and Eldev, other than the things above?\nGood question! Eask is more than a build tool now, it can be used for various purposes! But here are Eask aims to be:\nConsistent enough to sandbox across all systems General enough to have Emacsers frequently used commands (byte-compile, checkdoc, etc) Robust enough to provide useful results even in the presence of user errors Dependency-free so that the tool can be run on any platform P.S. See Why Eask? for more detailed information.\n❓ Why Eask? Eask has the same philosophy as Cask, see their site Why Cask? to understand why you should use Eask (or Cask).\nMany tools like Cask, makem.sh, or Eldev don\u0026rsquo;t \u0026ldquo;really\u0026rdquo; support Windows. Cask has dropped support for Legacy Windows, makem.sh runs on bash, Eldev does support Windows, but the author doesn\u0026rsquo;t use it on Windows (not having full tests, see their CI workflows). Eask aims to adapt all platforms, including Linux, macOS, and Windows. It focuses on the cross-platform capability and the consistency between each OS. If Eask works on your machine, then it will work on any platform.\nHere are our suggestions; if you plan to work on an OS-specific package (never going to other platforms), go for other tools. On the other hand, Eask aims to provide the best consistency between each OS. Alternatively, if you want to learn a tool that works everywhere, Eask is one of the best choices.\n⚖️ Comparisons The table was compiled by reading these projects’ documentation and source code, but the author is not an expert on these tools. Corrections are welcome.\n🔍 Project Wise The table shows what technology has been chosen by their author and how the project is being constructed. Furthermore, what technical decisions have they made? Drop support? Project\u0026rsquo;s layout? Etc.\nEask Cask Eldev makem.sh bin folder binary, bash, bat bash, bat bash, bat, ps1 bash Cross-Platform ✅ ❌, no Windows support ✅ ❌, no Windows support Emacs version 26.1+ 24.5+ 24.4+ 26.1+ Size 9,000+ lines 3,000+ lines 8,000+ lines 1,200+ lines Executable ✅ ❌ ❌ ❌ Pure Elisp ❌, JavaScript ✅ ✅ ✅ CLI Parser yargs commander built-in built-in 💡 makem.sh has a good comparisons document as well, visit their site 🔍 Feature Wise This is the feature comparison between each tool. Every tool has its advantages; choose the right tool that works for you!\nIf the features are not listed below, either it is forgotten or simply considered too essential, so every tool has it; hence we don\u0026rsquo;t add them to the list.\nEask Cask Eldev makem.sh Elisp configuration ✅, DSL is optional ❌, DSL only ✅, pure elisp ❌ Handle archives failure ✅, see archives ❌ ❌ ❌ create project, etc ✅ ❌ ❌ ❌ link local dependencies ✅ ✅ ✅ ❌ exec program ✅ ✅ ❌ ❌ eval expressions ✅ ✅ ✅ ❌ emacs execution ✅ ✅ ❌ ❌ Built-in linters ✅ ❌ ✅ ❌ Built-in tests ✅ ❌ ✅ ❌ Run script ✅ ❌ ❌ ❌ Self-defined commands ✅ ❌ ✅ ❌ Subcommand ✅ ❌ ❌ ❌ 📰 News 0.9.x - Improve UX in general 0.8.x - Add link command 0.7.x - Fix default-directory isn\u0026rsquo;t honored by -g option 0.6.x - You can now use eask create to create an Elisp project 0.5.x - Handle error for failed archive 0.4.x - Add color logger 0.3.x - Add verbosity level and timestamps 0.2.x - Done basic error handling with exit code at the end of executions 0.1.39 - Use spawn instead exec; now messages will be printed immediately 0.1.x - Project bare-bones are pretty much complete! 📝 Todo list 🔍 Development [DEV] Publish package to winget 🔍 Core commands [FEAT] Add publish command; to publish the package to the eask archive? 🔍 Eask-file commands N/A 📂 Underlying Projects The design of Eask was greatly influenced by the following projects:\nCask - Project management tool for Emacs makem.sh - Makefile-like script for building and testing Emacs Lisp packages epm - Emacs Package Manager Eldev - Elisp Development Tool ","description":"Eask was built to use as a package development tool in your Elisp packages. But now, Eask supports various types of Emacs Lisp tasks. It can be used in three major ways:\nDev tool for Elisp packages Dependency management for your configuration Run elisp programs for all other purposes So what are the major differences between Eask and other build tools like Cask, makem.sh, and Eldev, other than the things above?\n"},{"id":20,"href":"/tos/","title":"Legal notice and privacy","parent":"","content":" Contact information Jen-Chieh Shen Email: jcs090219@gmail.com\nPrivacy policy Collection of general data and information The website cl-qob.github.io collects a series of general data and information when a data subject or automated system calls up the website. This general data and information are stored in the server log files. Collected may be:\nthe browser types and versions used the operating system used by the accessing system the website from which an accessing system reaches our website (so-called referrers) the sub-websites the date and time of access to the Internet site an Internet protocol address (IP address) the Internet service provider of the accessing system any other similar data and information that may be used in the event of attacks on our information technology systems When using these general data and information, we do not draw any conclusions about the data subject. Rather, this information is needed to deliver the content of our website correctly and answer your request (Article 6.1b GDPR).\nYour IP address and the requested URL can be stored up to 7 days due to analyze possible problems with the web page. Given that a problem appears there are cases, where it is possible that this information is stored longer than 7 days to analyze the problem in depth. They will be deleted as soon as it is confirmed that they can no further help with diagnosing the problem or the problem is solved. (Article 6.1f GDPR).\nCookies This web page does not use any cookies.\n","description":" Contact information Jen-Chieh Shen Email: jcs090219@gmail.com\nPrivacy policy Collection of general data and information The website cl-qob.github.io collects a series of general data and information when a data subject or automated system calls up the website. This general data and information are stored in the server log files. Collected may be:\nthe browser types and versions used the operating system used by the accessing system the website from which an accessing system reaches our website (so-called referrers) the sub-websites the date and time of access to the Internet site an Internet protocol address (IP address) the Internet service provider of the accessing system any other similar data and information that may be used in the event of attacks on our information technology systems When using these general data and information, we do not draw any conclusions about the data subject. Rather, this information is needed to deliver the content of our website correctly and answer your request (Article 6.1b GDPR).\n"},{"id":21,"href":"/tags/","title":"Tags","parent":"","content":"","description":""}]