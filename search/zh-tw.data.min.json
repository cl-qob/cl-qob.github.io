[{"id":0,"href":"/zh-tw/Contributing/Developing-Qob/","title":"🔨 開發 Qob","parent":"貢獻","content":" 🚩 必備條件 📝 建構 📈 測試 🚩 必備條件 要更改 Qob，您應該：\nSBCL 為 lisp 實作。 Make 用於編譯系統。 Quicklisp 為 CL 套件管理員。 📝 建構 若要建立開發環境，您必須使用 build from source 方法安裝 Qob。請確定您已設定環境 PATH 變數，因此您可以從終端機呼叫 qob。\n完成安裝後，嘗試：\n$ qob locate 它應該會列印出 qob 可執行檔的位置。即使您已安裝多個 Qob 版本，也應該可以辨識 Qob 可執行檔的位置！\n📈 測試 Qob 不提供本地測試，我們所有的測試都是使用 GitHub 完成的動作。 請 fork 我們的存儲庫 並將您的更改推送到您的 fork。 GitHub 行動應該為你拿起測試！\n確保您的存儲庫（分叉）中啟用了 GitHub Actions。 必須 設置 -\u0026gt; 操作 -\u0026gt; 常規 -\u0026gt; 操作權限； 確保您已經檢查了正確的選項。\n","description":" 🚩 必備條件 📝 建構 📈 測試 🚩 必備條件 要更改 Qob，您應該：\nSBCL 為 lisp 實作。 Make 用於編譯系統。 Quicklisp 為 CL 套件管理員。 📝 建構 若要建立開發環境，您必須使用 build from source 方法安裝 Qob。請確定您已設定環境 PATH 變數，因此您可以從終端機呼叫 qob。\n"},{"id":1,"href":"/zh-tw/Getting-Started/Quick-Start/","title":"🔰 快速開始","parent":"開始使用","content":" 步驟 1: 設置 NodeJS runtime 和 npm 步驟 2: 安裝 Eask 步驟 3: 導航到現有項目或創建新項目 步驟 4： 創建 Eask 文件 步驟 5: 開始包開發 步驟 6: 管理包檔案 步驟 7: 添加一些依賴 步驟 8: 安裝依賴 也可以看看 使用 Eask 作為您的 Emacs 包管理工具。\n安裝是跨平台的，使用 npm。 關於如何使用其他方法安裝 Eask 的說明， 請參見安裝。\n需要安裝 Git 才能運行本教程。\n步驟 1: 設置 NodeJS runtime 和 npm 請在 [此處](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm#using-a-node-installer-to-install-nodejs-and- npm) 並安裝 NodeJS 和 npm 對應你當前的操作系統\n💡 如果您不喜歡 NodeJS 和 npm，您可以使用 [binary](https://emacs-eask.github.io/Getting-Started/Install-Eask/#binary-cross -platform） 來自我們的 release 頁面。 步驟 2: 安裝 Eask $ npm install -g @emacs-eask/cli 要驗證您的新安裝：\n$ eask --version 步驟 3: 導航到現有項目或創建新項目 如果您已有一個現有的 elisp 項目，請導航到項目根文件夾。\n$ cd /path/to/project/dir/ 創建一個：\n$ eask create package project-name 它應該在您當前的工作目錄中創建一個名為 project-name 的文件夾。\n步驟 4： 創建 Eask 文件 如果您選擇使用 eask create 創建項目，請跳過此步驟！\n否則，在現有項目中創建 Eask 文件：\n$ eask init 您將被問到一些關於您將要創建的包的問題：\npackage name: (your-project) version: (1.0.0) description: Your project description! entry point: (your-project.el) emacs version: (26.1) website: https://example.com/project-url/ keywords: tools example About to write to /path/to/project/Eask: (package \u0026#34;your-project\u0026#34; \u0026#34;1.0.0\u0026#34; \u0026#34;Your project description!\u0026#34;) (website-url \u0026#34;https://example.com/project-url/\u0026#34;) (keywords \u0026#34;tools\u0026#34; \u0026#34;example\u0026#34;) (package-file \u0026#34;your-project.el\u0026#34;) (script \u0026#34;test\u0026#34; \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;) (source \u0026#34;gnu\u0026#34;) (depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) Is this OK? (yes) yes ⏎ 您應該能夠在項目文件夾中看到一個 Eask 文件。 🎉🎊\n步驟 5: 開始包開發 要檢查您的包裹信息，請運行：\n$ eask info 您應該能夠看到以下信息：\nyour-package (1.0.0) | deps: 0 | devDeps: 0 Your project description! https://example.com/project-url/ keywords: tools, example entry: your-package-file.el kind: single dist .total-files: 0 .unpacked-size: 0 從一開始，您就不會有任何 dependencies 和 devDependencies（默認為 0）！\n步驟 6: 管理包檔案 您可以使用 Eask 文件中的 source 指令來管理包存檔。\n(source \u0026#34;gnu\u0026#34;) ; 默認 (source \u0026#34;melpa\u0026#34;) ; 添加包 archive 💡 有關更多信息，請參閱 DSL/source！ 步驟 7: 添加一些依賴 您可以在 Eask 文件中使用 depends-on 指令添加依賴項。\n... (depends-on \u0026#34;f\u0026#34;) (depends-on \u0026#34;ht\u0026#34;) 💡 確保您添加的依賴項在包存檔中可用！\n否則你會得到一個錯誤 `package-name-\u0026rsquo; is unavailable！\n步驟 8: 安裝依賴 現在我們可以安裝我們在 Eask 文件中指定的依賴項：\n$ eask install-deps 您應該會看到 Eask 正確執行，輸出類似如下：\nLoading package information... done Installing 2 package dependencies... - Installing f (20220405.1534)... done - Installing ht (20210119.741)... done (Total of 2 dependencies installed, 0 skipped) 也可以看看 Commands and options Domain Specific Language Basic Usage ","description":" 步驟 1: 設置 NodeJS runtime 和 npm 步驟 2: 安裝 Eask 步驟 3: 導航到現有項目或創建新項目 步驟 4： 創建 Eask 文件 步驟 5: 開始包開發 步驟 6: 管理包檔案 步驟 7: 添加一些依賴 步驟 8: 安裝依賴 也可以看看 使用 Eask 作為您的 Emacs 包管理工具。\n安裝是跨平台的，使用 npm。 關於如何使用其他方法安裝 Eask 的說明， 請參見安裝。\n需要安裝 Git 才能運行本教程。\n步驟 1: 設置 NodeJS runtime 和 npm 請在 [此處](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm#using-a-node-installer-to-install-nodejs-and- npm) 並安裝 NodeJS 和 npm 對應你當前的操作系統\n"},{"id":2,"href":"/zh-tw/Getting-Started/","title":"開始使用","parent":"","content":"","description":""},{"id":3,"href":"/zh-tw/Getting-Started/Finding-Lisp/","title":"🔭 尋找 Lisp","parent":"開始使用","content":"默認情況下，會為默認的 Emacs 安裝軟件包，即“emacs”命令後面的軟件包。 要選擇不同的 Emacs，請將環境變量“EMACS”設置為要使用的 Emacs 的命令名稱或可執行路徑：\n$ EMACS=\u0026#34;emacs26.1\u0026#34; eask command 請注意，已安裝的依賴項受 Emacs 版本的影響。 因此，在版本之間切換時，您必須為每個版本安裝依賴項：\n$ EMACS=\u0026#34;emacs26.3\u0026#34; eask install 不幸的是，在某些情況下，Emacs 本身會以與 eask 衝突的方式重置 EMACS 變量，在這種情況下， 您可以改用環境變量 EASK_EMACS。 具體來說，此問題會影響：Emacs-26，對於 M-x compile、 M-x shell 或 M-x term，對於 Emacs-27 和 Emacs-28 僅適用於 M-x term。\n","description":"默認情況下，會為默認的 Emacs 安裝軟件包，即“emacs”命令後面的軟件包。 要選擇不同的 Emacs，請將環境變量“EMACS”設置為要使用的 Emacs 的命令名稱或可執行路徑：\n$ EMACS=\u0026#34;emacs26.1\u0026#34; eask command 請注意，已安裝的依賴項受 Emacs 版本的影響。 因此，在版本之間切換時，您必須為每個版本安裝依賴項：\n$ EMACS=\u0026#34;emacs26.3\u0026#34; eask install 不幸的是，在某些情況下，Emacs 本身會以與 eask 衝突的方式重置 EMACS 變量，在這種情況下， 您可以改用環境變量 EASK_EMACS。 具體來說，此問題會影響：Emacs-26，對於 M-x compile、 M-x shell 或 M-x term，對於 Emacs-27 和 Emacs-28 僅適用於 M-x term。\n"},{"id":4,"href":"/zh-tw/Getting-Started/Install-Qob/","title":"💾 安裝 Qob","parent":"開始使用","content":"本文檔將指導您完成 Qob 的安裝。\n安裝 Qob 在 macOS、Linux、Windows、BSD、 等常見的作業系統。\n💾 預建置檔案 💾 使用終端 💾 包管理器 📦 Homebrew (macOS 或 Linux) 📦 MacPorts (macOS) 📦 Debian (Linux) 📦 Snap (Linux) 📦 Arch (Linux) 📦 Chocolatey (Windows) 📦 Scoop (Windows) 📦 Winget (Windows) 💾 從原始碼構建 🚩 前置工具 🏡 設定（透過可執行檔） 💾 預建置檔案 從 Qob Releases 下載適合您平台的版本。 下載後，二進製文件可以從任何地方運行。 您無需將其安裝在全球位置。 這適用於您沒有特權帳戶的共享主機和其他系統。\n理想情況下，您應該將它安裝在 PATH 中的某個位置以便於使用。 /usr/local/bin 是最有可能的位置。\n💾 使用終端 在 macOS 或 Linux:\n$ curl -fsSL https://raw.githubusercontent.com/cl-qob/cli/master/webinstall/install.sh | sh 在 Windows:\n$ curl.exe -fsSL https://raw.githubusercontent.com/cl-qob/cli/master/webinstall/install.bat | cmd /Q 💾 包管理器 📦 Homebrew (macOS 或 Linux) Homebrew 是一個適用於 macOS 和 Linux 的免費開源套件管理器。 若要安裝 Qob CLI，請執行下列操作：\n$ brew tap cl-qob/cli https://github.com/cl-qob/packaging $ brew install qob-cli 📦 MacPorts (macOS) MacPorts 是一款適用於 macOS 的免費開源套件管理器。 若要安裝 Qob CLI，請執行下列操作：\n$ sudo port install qob-cli 📦 Debian (Linux) Linux Debian 發行版的衍生版本包括 elementary OS、KDE neon、 Linux Lite、Linux Mint、MX Linux、Pop!_OS、Ubuntu、 Zorin OS 等。\n$ sudo curl -SsL -o /etc/apt/trusted.gpg.d/qobsource.gpg https://raw.githubusercontent.com/cl-qob/packaging/master/debian/KEY.gpg $ sudo curl -SsL -o /etc/apt/sources.list.d/qobsource.list https://raw.githubusercontent.com/cl-qob/packaging/master/debian/qobsource.list $ sudo apt update --allow-insecure-repositories $ sudo apt install qob-cli --allow-unauthenticated 您也可以直接從 packaging 代碼庫下載 Debian 軟體包。\n📦 Snap (Linux) Snap 是一款適用於 Linux 的免費開源套件管理器。 snap 套件適用於大多數發行版，安裝簡單且會自動更新。\n$ sudo snap install qob-cli 📦 Arch (Linux) 有一個 PKGBUILD 可以從原始程式碼建立 qob 並建立一個包，因此在儲存庫的最上層目錄中您可以簡單地運行：\n$ makepkg -i 📦 Chocolatey (Windows) 如果您的計算機上安裝了 Chocolatey，則可以使用以下一行代碼安裝 Qob：\n$ choco install qob-cli 📦 Scoop (Windows) Scoop 是一個適用於 Windows 的免費開源套件管理器。 若要安裝 Qob CLI，請執行下列操作：\n$ scoop bucket add cl-qob/cli https://github.com/cl-qob/packaging $ scoop install qob-cli 📦 Winget (Windows) Winget是微軟官方的 Windows 免費開源軟體套件管理器。 若要安裝 Qob CLI，請執行下列操作：\n$ winget install qob.cli 💾 從原始碼構建 🚩 前置工具 Git SBCL Quicklisp 或者，您可以直接從這個代碼庫克隆它:\n# 克隆這個代碼庫 $ git clone https://github.com/cl-qob/cli qob-cli # 將工作目錄更改為 qob-cli $ cd qob-cli # 建構執行檔到 `bin` 資料夾 $ make build 🏡 設定（透過可執行檔） 現在您可以使用可執行檔 bin/qob 執行 qob；將 /path/to/qob-cli/bin/ 加入您的環境 PATH 以從任何位置執行 qob！\n在 Linux/macOS 上、\nexport PATH=\u0026#34;path/to/qob-cli/bin:$PATH\u0026#34; 在 Windows 上、\nset PATH=%PATH%;c:/path/to/qob-cli/bin 正確設定後，嘗試 qob --version 即可看到目前 qob 的版本號碼！🎉 🎊\n","description":"本文檔將指導您完成 Qob 的安裝。\n安裝 Qob 在 macOS、Linux、Windows、BSD、 等常見的作業系統。\n💾 預建置檔案 💾 使用終端 💾 包管理器 📦 Homebrew (macOS 或 Linux) 📦 MacPorts (macOS) 📦 Debian (Linux) 📦 Snap (Linux) 📦 Arch (Linux) 📦 Chocolatey (Windows) 📦 Scoop (Windows) 📦 Winget (Windows) 💾 從原始碼構建 🚩 前置工具 🏡 設定（透過可執行檔） 💾 預建置檔案 從 Qob Releases 下載適合您平台的版本。 下載後，二進製文件可以從任何地方運行。 您無需將其安裝在全球位置。 這適用於您沒有特權帳戶的共享主機和其他系統。\n"},{"id":5,"href":"/zh-tw/Getting-Started/Basic-Usage/","title":"🔨 使用基礎","parent":"開始使用","content":"Eask 的 CLI 功能齊全但易於使用，即使對於那些使用命令行的經驗非常有限的人也是如此。\n以下是您在開發 Eask 項目時將使用的最常用命令的說明。 請參閱 命令和選項 以全面了解 Eask 的 CLI。\n一旦你安裝了 Eask，確保它在你的 PATH 中。 您可以通過 help 命令測試 Eask 是否已正確安裝：\n$ qob --help 💡 或者，您可以使用 --show-hidden 來顯示所有可用的命令和選項！ 您在控制台中看到的輸出應類似於以下內容：\nNAME: qob - CLI for building, running, testing, and managing your Common Lisp dependencies USAGE: qob [global-options] [\u0026lt;command\u0026gt;] [command-options] [arguments ...] OPTIONS: --help display usage information and exit --no-color enable/disable color output --version display version and exit -a, --all enable all flag -g, --global change default workspace to ~/.qob/ -v, --verbose \u0026lt;INT\u0026gt; set verbosity from 0 to 5 [default: 3] COMMANDS: build Build the executable clean Delete various files produced during building create Create a new Common Lisp project dists List out all installed dists info Display information about the current system(s) install Install systems install-deps Automatically install system dependencies install-dists Install dists list List the registered system status Display the state of the workspace uninstall Uninstall systems AUTHORS: Jen-Chieh Shen \u0026lt;jcs090218@gmail.com\u0026gt; LICENSE: MIT 🗃️ qob 命令 最常見的用法可能是在當前目錄作為輸入目錄的情況下運行 eask。 然後你運行 eask 後跟一個子命令：\n$ eask info # 打印出Eask文件信息 Notice the subcommand can be nested:\n$ eask clean workspace # 刪除你的 .eask 文件夾 傳遞選項 --help 以查找有關您正在使用的命令的更多信息：\n$ eask clean --help 輸出，它顯示支持 7 個子命令：\nDelete various files produced during building Usage: eask clean \u0026lt;type\u0026gt; [options..] Commands: clean all Do all cleaning tasks [aliases: everything] clean autoloads Remove generated autoloads file clean dist [destination] Delete dist subdirectory [aliases: distribution] clean elc Remove byte compiled files generated by eask compile clean log-file Remove all generated log files clean pkg-file Remove generated pkg-file clean workspace Clean up .eask directory [aliases: .eask] Positionals: \u0026lt;type\u0026gt; type of the cleaning task ... 以下是已知的嵌套子命令列表：\neask create eask clean eask generate eask generate workflow eask link eask lint eask run eask source eask test 📌 了解你的 elpa 目錄 Eask 創建了一個隔離的環境，因此在播放、測試和運行您的 elisp 包後它不會產生任何副作用。 但了解當前 Eask 會話指向的 elpa 目錄（您可以將其視為您的 .emacs.d）非常重要，這樣您 才能釋放該工具的全部潛力！\n以下是 Eask 在不同場景下的幕後工作方式：\n名稱 描述 選項 路徑 local 默認行為，使用 Eask 作為包開發工具 n/a ./.eask config 使用 Eask 作為您的包管理器 (它也可以用作測試工具) -c or --config ~/.emacs.d global Eask 作為通用工具使用，與其他範圍無關 -g or --global ~/.eask 您可能會想到為什麼要創建這些規則。\nconfig 和 local 範圍很容易理解，因為許多其他構建工具使用 local 範圍來創建隔離環境。 config 範圍是一項附加功能，適用於喜歡使用外部工具而不是內置 package.el 或配置基礎 straight.el 管理包的人， 因此您可以節省啟動時間 檢查是否為您的 Emacs 運行安裝了軟件包。\n那麼 Eask 的 global 範圍是什麼？ 為什麼需要它？\nEask 現在不僅僅是一個構建工具。 一些命令不需要它們的依賴項作為包依賴項。 例如，cat 命令：\n$ eask cat [PATTERNS..] cat 是一個模仿 Linux 的默認 cat 命令的簡單命令，但它會為您突出顯示語法！ 它是如何實施的？ 該命令依賴於外部包 e2ansi，這既不是 package 也不是 config 依賴項（它可能是，但假設我們不需要它）。\n我們如何使用這個命令而不會對您的項目或個人 emacs 配置產生副作用？ 針對這個問題引入了全局範圍。 現在我們可以添加任何有用的命令而不用擔心你的環境被搞砸了。\n下面是描述 Eask 生命週期的流程圖：\n默認情況下，Eask 使用您的當前目錄作為您的工作區，因為大多數時候您只想為您的 elisp 包運行作業。\n","description":"Eask 的 CLI 功能齊全但易於使用，即使對於那些使用命令行的經驗非常有限的人也是如此。\n以下是您在開發 Eask 項目時將使用的最常用命令的說明。 請參閱 命令和選項 以全面了解 Eask 的 CLI。\n一旦你安裝了 Eask，確保它在你的 PATH 中。 您可以通過 help 命令測試 Eask 是否已正確安裝：\n$ qob --help 💡 或者，您可以使用 --show-hidden 來顯示所有可用的命令和選項！ 您在控制台中看到的輸出應類似於以下內容：\nNAME: qob - CLI for building, running, testing, and managing your Common Lisp dependencies USAGE: qob [global-options] [\u0026lt;command\u0026gt;] [command-options] [arguments ...] OPTIONS: --help display usage information and exit --no-color enable/disable color output --version display version and exit -a, --all enable all flag -g, --global change default workspace to ~/.qob/ -v, --verbose \u0026lt;INT\u0026gt; set verbosity from 0 to 5 [default: 3] COMMANDS: build Build the executable clean Delete various files produced during building create Create a new Common Lisp project dists List out all installed dists info Display information about the current system(s) install Install systems install-deps Automatically install system dependencies install-dists Install dists list List the registered system status Display the state of the workspace uninstall Uninstall systems AUTHORS: Jen-Chieh Shen \u0026lt;jcs090218@gmail.com\u0026gt; LICENSE: MIT 🗃️ qob 命令 最常見的用法可能是在當前目錄作為輸入目錄的情況下運行 eask。 然後你運行 eask 後跟一個子命令：\n"},{"id":6,"href":"/zh-tw/Getting-Started/Commands-and-options/","title":"🚩 命令和選項","parent":"開始使用","content":" 🚩 創建 🔍 eask create package 🔍 eask create elpa 🚩 核心 🔍 eask init 🔍 eask info 🔍 eask status 🔍 eask install-deps 🔍 eask install 🔍 eask uninstall 🔍 eask package 🔍 eask compile 🔍 eask recompile 🔍 eask package-directory 🔍 eask path 🔍 eask load-path 🔍 eask files 🔍 eask recipe 🔍 eask keywords 🔍 eask bump 🔍 eask cat 🔍 eask concat 🔍 eask loc 🚩 文件 🔍 eask docs 🚩 執行 🔍 eask load 🔍 eask exec 🔍 eask emacs 🔍 eask eval 🔍 eask repl 🔍 eask run script 🔍 eask run command 🔍 eask docker 🚩 管理 🔍 eask archives 🔍 eask search 🔍 eask upgrade 🔍 eask list 🔍 eask outdated 🔍 eask refresh 🚩 生成 🔍 eask generate autoloads 🔍 eask generate pkg-file 🔍 eask generate recipe 🔍 eask generate license 🔍 eask generate ignore 🔍 eask generate test ert 🔍 eask generate test ert-runner 🔍 eask generate test buttercup 🔍 eask generate test ecukes 🔍 eask generate workflow circle-ci 🔍 eask generate workflow github 🔍 eask generate workflow gitlab 🔍 eask generate workflow travis-ci 🚩 連結 🔍 eask link add 🔍 eask link delete 🔍 eask link list 🚩 清理 🔍 eask clean workspace 🔍 eask clean elc 🔍 eask clean dist 🔍 eask clean autoloads 🔍 eask clean pkg-file 🔍 eask clean log-file 🔍 eask clean all 🚩 检查 🔍 eask lint package 🔍 eask lint checkdoc 🔍 eask lint elint 🔍 eask lint elisp-lint 🔍 eask lint elsa 🔍 eask lint indent 🔍 eask lint keywords 🔍 eask lint license 🔍 eask lint declare 🔍 eask lint regexps 🚩 測試框架 🔍 eask test activate 🔍 eask test ert 🔍 eask test ert-runner 🔍 eask test buttercup 🔍 eask test ecukes 🔍 eask test melpazoid 🚩 格式化 🔍 eask format elisp-autofmt 🔍 eask format elfmt 🚩 控制 DSL 🔍 eask source add 🔍 eask source delete 🔍 eask source list 🚩 實用工具 🔍 eask upgrade-eask 🔍 eask locate 🚩 檢查器 🔍 eask analyze 🚩 全域選項 🔍 \u0026ndash;global, -g 🔍 \u0026ndash;config, -c 🔍 \u0026ndash;all, -a 🔍 \u0026ndash;quick, -q 🔍 \u0026ndash;force, -f 🔍 \u0026ndash;debug 🔍 \u0026ndash;strict 🔍 \u0026ndash;allow-error 🔍 \u0026ndash;insecure 🔍 \u0026ndash;timestamps 🔍 \u0026ndash;log-level 🔍 \u0026ndash;log-file, \u0026ndash;lf 🔍 \u0026ndash;no-color 🔍 \u0026ndash;elapsed-time, \u0026ndash;et 🔍 \u0026ndash;verbose, -v \u0026lt;integer\u0026gt; 🔍 \u0026ndash;version 🔍 \u0026ndash;help 🚩 代理選項 🔍 \u0026ndash;proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;http-proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;https-proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;no-proxy \u0026lt;pattern\u0026gt; eask 程序的一般語法是：\n$ eask [GLOBAL-OPTIONS] [COMMAND] [COMMAND-OPTIONS] [COMMAND-ARGUMENTS] 🚩 創建 🔍 eask create package 使用默認的“Eask”文件和 CI/CD 支持創建一個新的 elisp 項目。\n$ eask [GLOBAL-OPTIONS] create package \u0026lt;name\u0026gt; 💡 模板項目位於 https://github.com/emacs-eask/template-elisp。 🔍 eask create elpa 使用 github-elpa 創建一個新的 ELPA。\n$ eask [GLOBAL-OPTIONS] create elpa \u0026lt;name\u0026gt; 💡 模板項目位於 https://github.com/emacs-eask/template-elpa。 🚩 核心 經常使用未分類的命令。\n🔍 eask init 初始化當前目錄以開始使用 Eask。\n$ eask [GLOBAL-OPTIONS] init Eask 將生成這樣的文件：\n(package \u0026#34;PACKAGE-NAME\u0026#34; \u0026#34;VERSION\u0026#34; \u0026#34;YOUR PACKAGE SUMMARY\u0026#34;) (website-url \u0026#34;https://example.com/project-url/\u0026#34;) (keywords \u0026#34;KEYWORD1\u0026#34; \u0026#34;KEYWORD2\u0026#34;) (package-file \u0026#34;PACKAGE-FILE\u0026#34;) (script \u0026#34;test\u0026#34; \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;) (source \u0026#34;gnu\u0026#34;) (depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) [推薦] 如果您已有 elisp 項目，您可以將 .el 文件轉換為 Eask 文件：\n$ eask init --from source /path/to/source.el 如果您已有 Cask 項目，您可以將 Cask 文件轉換為 Eask 文件：\n$ eask init --from cask /path/to/Cask 如果您已有 Eldev 項目，您可以將 Eldev 文件轉換為 Eask 文件：\n$ eask init --from eldev /path/to/Eldev 如果您已有 Keg 項目，您可以將 Keg 文件轉換為 Eask 文件：\n$ eask init --from keg /path/to/Keg 💡 有關更多 Eask 文件示例，請參閱示例部分！ 🔍 eask info 顯示有關項目或配置的信息。\n$ eask [GLOBAL-OPTIONS] info 🔍 eask status 顯示工作區的狀態。\n$ eask [GLOBAL-OPTIONS] status 🔍 eask install-deps 安裝所有依賴項。\n別名: install-dependencies, prepare\n$ eask [GLOBAL-OPTIONS] install-deps [--dev] 💡 指定選項 [\u0026ndash;dev] 從開發範圍安裝依賴項。 🔍 eask install 安裝軟件包。\n$ eask [GLOBAL-OPTIONS] install [PACKAGES..] 通過指定參數安裝包：\n$ eask install auto-complete helm magit 否則，它將安裝當前開發的包：\n$ eask install 🔍 eask uninstall 卸載/刪除包。\n$ eask [GLOBAL-OPTIONS] uninstall [PACKAGES..] 通過指定參數卸載軟件包：\n$ eask uninstall dash f s 否則，它將從當前開發中卸載包：\n$ eask uninstall 🔍 eask package 構建包工件。\n別名: pack\n$ eask package [DESTINATION] 如果未指定 [DESTINATION]，則默認導出到 /dist 文件夾。\n🔍 eask compile 字節編譯 .el 文件。\n$ eask compile [FILES..] 通過指定參數編譯文件：\n$ eask compile file-1.el file-2.el 或者編譯已經在你的 Eask 文件中指定的文件。\n$ eask compile 🔍 eask recompile 重新字節編譯 .el 文件。\n$ eask recompile [FILES..] 💡 與 eask compile 類似，但它在編譯前會刪除舊的 .elc 檔案。 🔍 eask package-directory 打印包目錄的路徑，其中安裝了所有依賴項。\n$ eask [GLOBAL-OPTIONS] package-directory 🔍 eask path 打印此項目的 PATH 環境變量。\n別名: exec-path\n$ eask [GLOBAL-OPTIONS] path [PATTERNS..] 或者，您可以傳入 [PATTERNS..] 來執行搜索。\n🔍 eask load-path 打印包含當前項目依賴項的加載路徑。\n$ eask [GLOBAL-OPTIONS] load-path [PATTERNS..] 或者，您可以傳入 [PATTERNS..] 來執行搜索。\n🔍 eask files 打印所有包文件的列表。\n$ eask [GLOBAL-OPTIONS] files [PATTERNS..] 如果定義了 [PATTERNS..] ，它將顯示與該模式匹配的文件。\n🔍 eask recipe 建議 recipe 格式。\n$ eask [GLOBAL-OPTIONS] recipe [FILES..] 🔍 eask keywords 列出可在標題部分中使用的可用關鍵字。\n$ eask [GLOBAL-OPTIONS] keywords 🔍 eask bump 為你的專案或 Eask-file 遞增版本號。\n$ eask [GLOBAL-OPTIONS] bump [LEVELS..] 💡 參數 [LEVELS..] 接受 major、minor 和/或 patch！ 🔍 eask cat 查看文件名。\n位置參數 [PATTERNS..] 是一個通配符模式數組。\n$ eask [GLOBAL-OPTIONS] cat [PATTERNS..] 💡 此命令使用包 e2ansi 來完成語法高亮。 🔍 eask concat 將所有 Emacs Lisp 文件連接成一個文件。\n$ eask [GLOBAL-OPTIONS] concat [FILES..] 🔍 eask loc 列印 LOC 信息。\n$ eask [GLOBAL-OPTIONS] loc [FILES..] 🚩 文件 用於建立文檔站點的命令。\n🔍 eask docs 建置文檔。\n$ eask [GLOBAL-OPTIONS] docs [NAMES..] 🚩 執行 指令允許執行在 Eask 核心之上。\n基本上，這可以讓你做任何你想做的事！\n🔍 eask load 按順序加載 Emacs Lisp 文件。\n$ eask [GLOBAL-OPTIONS] load [FILES..] 🔍 eask exec 使用給定的參數執行系統命令。\n$ eask [GLOBAL-OPTIONS] exec [COMMAND] [ARGUMENTS ...] 🔍 eask emacs 在合適的環境下執行emacs。\n$ eask [GLOBAL-OPTIONS] emacs [ARGUMENTS ...] 🔍 eask eval 將 FORM 評估為 lisp 形式。\n$ eask [GLOBAL-OPTIONS] eval [FORM] 🔍 eask repl 啟動 Elisp REPL。\n$ eask [GLOBAL-OPTIONS] repl [FILES..] 別名: ielm\n🔍 eask run script 運行腳本。\n$ eask [GLOBAL-OPTIONS] run script [NAMES..] 🔍 eask run command 運行指令。\n別名: cmd\n$ eask [GLOBAL-OPTIONS] run command [NAMES..] 🔍 eask docker 在 Docker 容器中啟動指定的 Emacs 版本\n$ eask [GLOBAL-OPTIONS] docker \u0026lt;VERSION\u0026gt; [ARGUMENTS ...] 例如：\n$ eask docker 26.1 info 這與直接跳入 Emacs 26.1（在 docker 中）並執行 eask info 相同。\n🚩 管理 指令能幫助你管理套件依賴.\n🔍 eask archives 列出所有包源。\n$ eask [GLOBAL-OPTIONS] archives 🔍 eask search 從包源中搜索包。\n$ eask [GLOBAL-OPTIONS] search [QUEIRES..] 🔍 eask upgrade 升級所有軟件包。\n$ eask [GLOBAL-OPTIONS] upgrade 🔍 eask list 列出包。\n$ eask [GLOBAL-OPTIONS] list [--depth] 🔍 eask outdated 列出所有過時的包。\n$ eask [GLOBAL-OPTIONS] outdated [--depth] 🔍 eask refresh 刷新包源。\n$ eask [GLOBAL-OPTIONS] refresh 🚩 生成 生成用於開發的文件。\n🔍 eask generate autoloads 生成 autoload 文件。\n將包自動加載到項目根目錄中的 project-autoloads.el。\n$ eask [GLOBAL-OPTIONS] generate autoloads project 是在 Eask 文件中聲明的項目名稱。 有關詳細信息，請參閱 多文件包 (elisp)。\n🔍 eask generate pkg-file 生成 pkg 文件。\n將包描述符文件寫入項目根目錄中的 project-pkg.el。\n別名: pkg, pkg-el\n$ eask [GLOBAL-OPTIONS] generate pkg-file project 是在 Eask 文件中聲明的項目名稱。 有關詳細信息，請參閱 多文件包 (elisp)。\n🔍 eask generate recipe 生成 recipe 文件。\n$ eask [GLOBAL-OPTIONS] generate recipe [DESTINATION] 如果未指定 [DESTINATION]，則默認導出到 /recipes 文件夾。\n🔍 eask generate license 生成 LICENSE 文件。\n$ eask [GLOBAL-OPTIONS] generate license \u0026lt;name\u0026gt; name` 是許可證的類型，請參閱 https://api.github.com/licenses 了解所有選擇。\n💡 此命令使用包 license-templates 生成忽略文件。 🔍 eask generate ignore 生成忽略文件。\n$ eask [GLOBAL-OPTIONS] generate ignore \u0026lt;name\u0026gt; 💡 此命令使用包 gitignore-templates 生成忽略文件。 🔍 eask generate test ert 為 ert測試建立一個新的測試項目。\n$ eask [GLOBAL-OPTIONS] generate test ert [NAMES..] 🔍 eask generate test ert-runner 為 ert-runner 建立一個新的測試項目。\n$ eask [GLOBAL-OPTIONS] generate test ert-runner [NAMES..] 🔍 eask generate test buttercup 為專案建立一個新的 Buttercup 設定。\n$ eask [GLOBAL-OPTIONS] generate test buttercup 🔍 eask generate test ecukes 為專案創建一個新的 Ecukes 設定。\n$ eask [GLOBAL-OPTIONS] generate test ecukes 🔍 eask generate workflow circle-ci 生成 CircleCI 工作流 yaml 文件。\n默認文件名為 config.yml。\n$ eask [GLOBAL-OPTIONS] generate workflow circle-ci [--file] 這將在 .circleci/ 下生成 yaml 文件！\n🔍 eask generate workflow github 生成 GitHub Actions 工作流 yaml 文件。\n默認文件名為 test.yml。\n$ eask [GLOBAL-OPTIONS] generate workflow github [--file] 這將在 .github/workflow/ 下生成 yaml 文件！\n🔍 eask generate workflow gitlab 生成 GitLab Runner 工作流程 yaml 文件。\n默認文件名為 .gitlab-ci.yml。\n$ eask [GLOBAL-OPTIONS] generate workflow gitlab [--file] 🔍 eask generate workflow travis-ci 生成 Travis CI 工作流 yaml 文件。\n默認文件名為 .travis.yml。\n$ eask [GLOBAL-OPTIONS] generate workflow travis-ci [--file] 🚩 連結 此包與本地文件系統的依賴關係之間的鏈接。 鏈接的依賴項避免了從遠程存檔下載依賴項的需要。 鏈接到的包必須有一個 Eask 文件或一個 -pkg.el 文件。\n🔍 eask link add 將給定的 source 目錄鏈接到此項目的包目錄，在給定的 package 名稱下。\n$ eask [GLOBAL-OPTIONS] link add \u0026lt;NAME\u0026gt; \u0026lt;PATH\u0026gt; 🔍 eask link delete 刪除給定包的鏈接。\n別名: remove\n$ eask [GLOBAL-OPTIONS] link delete [NAMES..] 🔍 eask link list 列出所有鏈接。\n$ eask [GLOBAL-OPTIONS] link list 🚩 清理 刪除建置過程中產生的各種檔案。\n🔍 eask clean workspace 從當前工作區中刪除 .eask 。\n別名: .eask\n$ eask [GLOBAL-OPTIONS] clean workspace ⛔️ 不要指定選項 --config, -c，否則它會刪除你的整個 ~/.emacs.d。\n$ eask clean workspace -g 🔍 eask clean elc 刪除所有 .elc 文件。 這將尊重您的 Eask 文件。\n$ eask [GLOBAL-OPTIONS] clean elc 🔍 eask clean dist 刪除 dist 子目錄。\n別名: distribution\n$ eask [GLOBAL-OPTIONS] clean dist 🔍 eask clean autoloads 刪除生成的 autoload 文件。\n$ eask [GLOBAL-OPTIONS] clean autoloads 🔍 eask clean pkg-file 刪除生成的 pkg 文件。\n$ eask [GLOBAL-OPTIONS] clean pkg-file 🔍 eask clean log-file 刪除所有生成的日誌文件。\n$ eask [GLOBAL-OPTIONS] clean log-file 🔍 eask clean all 此命令是所有其他清理命令的組合。\nclean workspace clean elc clean dist clean autoloads clean pkg-file clean log-file 別名: everything\n$ eask [GLOBAL-OPTIONS] clean all 🚩 检查 對 Emacs 包進行 lint 的命令。\n🔍 eask lint package 運行 package-lint.\n$ eask [GLOBAL-OPTIONS] lint package [FILES..] 🔍 eask lint checkdoc 運行 checkdoc (自帶).\n$ eask [GLOBAL-OPTIONS] lint checkdoc [FILES..] 🔍 eask lint elint 運行 elint (自帶).\n$ eask [GLOBAL-OPTIONS] lint elint [FILES..] 🔍 eask lint elisp-lint 運行 elisp-lint.\n$ eask [GLOBAL-OPTIONS] lint elisp-lint [FILES..] 這確實尊重 .dir-locals.el 文件！ 🎉\n🔍 eask lint elsa 運行 elsa.\n$ eask [GLOBAL-OPTIONS] lint lint elsa [FILES..] 🔍 eask lint indent 運行 indent-lint.\n$ eask [GLOBAL-OPTIONS] lint indent [FILES..] 🔍 eask lint keywords 運行 keywords checker (自帶).\n$ eask [GLOBAL-OPTIONS] lint keywords 🔍 eask lint license 運行 license check.\n$ eask [GLOBAL-OPTIONS] lint license 🔍 eask lint declare 運行 check-declare (自帶).\n$ eask [GLOBAL-OPTIONS] lint declare [FILES..] 🔍 eask lint regexps Run relint.\n別名: lint relint\n$ eask [GLOBAL-OPTIONS] lint regexps [FILES..] 🚩 測試框架 運行回歸/單元測試。\n🔍 eask test activate 激活包； 用於測試包激活\n$ eask [GLOBAL-OPTIONS] activate [FILES..] 💡 您可以傳入 [FILES..] 以便您可以全面測試您的包激活！\n[FILES..] 將在包激活後加載。\n🔍 eask test ert 運行 ert 測試。\n$ eask [GLOBAL-OPTIONS] test ert [FILES..] 🔍 eask test ert-runner 使用 ert-runner 運行 ert 測試。\n$ eask [GLOBAL-OPTIONS] test ert-runner 🔍 eask test buttercup 運行 buttercup 測試。\n$ eask [GLOBAL-OPTIONS] test buttercup 🔍 eask test ecukes 運行 ecukes 測試。\n$ eask [GLOBAL-OPTIONS] test ecukes [FILES..] 🔍 eask test melpazoid 運行 melpazoid 測試。\n$ eask [GLOBAL-OPTIONS] test melpazoid [DIRECTORIES..] 💡 如果未傳入 [DIRECTORIES..]，它將使用目前工作空間。 🚩 格式化 格式化 Emacs 源文件的命令。\n🔍 eask format elisp-autofmt 運行 elisp-autofmt 格式器.\n$ eask [GLOBAL-OPTIONS] format elisp-autofmt [FILES..] 🔍 eask format elfmt 運行 elfmt 格式器.\n$ eask [GLOBAL-OPTIONS] format elfmt [FILES..] 🚩 控制 DSL 控制 DSL 的指令列表。\n🔍 eask source add 新增一個包源。\n$ eask [GLOBAL-OPTIONS] source add \u0026lt;NAME\u0026gt; [URL] 🔍 eask source delete 移除一個包源。\n別名: remove\n$ eask [GLOBAL-OPTIONS] source delete \u0026lt;NAME\u0026gt; 🔍 eask source list 列出所有包源。\n$ eask [GLOBAL-OPTIONS] source list 💡 指令與 $ eask archives 相同! 🚩 實用工具 其他輔助命令。\n🔍 eask upgrade-eask 將 Eask 升級到最新版本。\n別名: upgrade-self\n$ eask [GLOBAL-OPTIONS] upgrade-eask 💡 這只有在您從源代碼安裝時才有效！ 🔍 eask locate 顯示 Eask 安裝位置。\n$ eask [GLOBAL-OPTIONS] locate 🚩 檢查器 檢查您的 Eask 文件的命令。\n🔍 eask analyze 檢查 Eask 文件。\n$ eask [GLOBAL-OPTIONS] analyze [FILES..] 例子:\n# lint all Eask-files in the current directory and subdirectories eask analyze # lint specific files eask analyze Eask Eask.27 # lint all Eask-files in specified directory and subdirectories eask analyze src/ # print result as JSON eask analyze --json 有關更多詳細信息，請運行 eask analyze --help。\n🚩 全域選項 以下選項適用於所有 Eask 命令：\n🔍 \u0026ndash;global, -g 這將使用 ~/.eask/ 而不是包開發環境。\n這用於其他任務。 例如，cat 等。\n$ eask -g [COMMAND] 🔍 \u0026ndash;config, -c 這將使用 ~/.emacs.d/ 而不是包開發環境。\n這用於為您的Emacs 配置做一些事情。 例如，包管理等。\n$ eask -c [COMMAND] 🔍 \u0026ndash;all, -a 啟用 all 標誌。\n$ eask -a [COMMAND] 🔍 \u0026ndash;quick, -q 乾淨地啟動而不加載配置文件。\n$ eask -q [COMMAND] 🔍 \u0026ndash;force, -f 強制執行命令。\n強制卸載包 dash ，即使它是另一個包的依賴項\n$ eask -f [COMMAND] 🔍 \u0026ndash;debug 啟用調試信息。\n這相當於：\n(setq debug-on-error t) 🔍 \u0026ndash;strict 觸發錯誤代替警告。\n例如，在 eask compile 中：\n(setq byte-compile-error-on-warn t) 🔍 \u0026ndash;allow-error 在不終止 Emacs 的情況下繼續執行。\n🔍 \u0026ndash;insecure 使用 HTTP 而不是 HTTPS 連接存檔。\n🔍 \u0026ndash;timestamps 啟用/禁用時間戳。\n🔍 \u0026ndash;log-level 啟用/禁用日誌標頭。\n🔍 \u0026ndash;log-file, \u0026ndash;lf 是否生成日誌文件。\n🔍 \u0026ndash;no-color 禁用顏色輸出。\n🔍 \u0026ndash;elapsed-time, \u0026ndash;et 顯示每個操作之間經過的時間。\n🔍 \u0026ndash;verbose, -v \u0026lt;integer\u0026gt; 將詳細程度從 0 設置為 5。\n$ eask --verbose 4 [COMMAND] 🔍 \u0026ndash;version 顯示版本號。\n🔍 \u0026ndash;help 顯示幫助。\n🚩 代理選項 🔍 \u0026ndash;proxy \u0026lt;proxy\u0026gt; 為 HTTP 和 HTTPS 設置 Emacs 代理：\n$ eask --proxy \u0026#34;localhost:8888\u0026#34; [COMMAND] 🔍 \u0026ndash;http-proxy \u0026lt;proxy\u0026gt; 僅為 HTTP 設置 Emacs 代理。\n🔍 \u0026ndash;https-proxy \u0026lt;proxy\u0026gt; 僅為 HTTPS 設置 Emacs 代理。\n🔍 \u0026ndash;no-proxy \u0026lt;pattern\u0026gt; 不要對任何 URL 匹配模式使用代理。\n\u0026lt;pattern\u0026gt; 是 Emacs 正則表達式。\n","description":" 🚩 創建 🔍 eask create package 🔍 eask create elpa 🚩 核心 🔍 eask init 🔍 eask info 🔍 eask status 🔍 eask install-deps 🔍 eask install 🔍 eask uninstall 🔍 eask package 🔍 eask compile 🔍 eask recompile 🔍 eask package-directory 🔍 eask path 🔍 eask load-path 🔍 eask files 🔍 eask recipe 🔍 eask keywords 🔍 eask bump 🔍 eask cat 🔍 eask concat 🔍 eask loc 🚩 文件 🔍 eask docs 🚩 執行 🔍 eask load 🔍 eask exec 🔍 eask emacs 🔍 eask eval 🔍 eask repl 🔍 eask run script 🔍 eask run command 🔍 eask docker 🚩 管理 🔍 eask archives 🔍 eask search 🔍 eask upgrade 🔍 eask list 🔍 eask outdated 🔍 eask refresh 🚩 生成 🔍 eask generate autoloads 🔍 eask generate pkg-file 🔍 eask generate recipe 🔍 eask generate license 🔍 eask generate ignore 🔍 eask generate test ert 🔍 eask generate test ert-runner 🔍 eask generate test buttercup 🔍 eask generate test ecukes 🔍 eask generate workflow circle-ci 🔍 eask generate workflow github 🔍 eask generate workflow gitlab 🔍 eask generate workflow travis-ci 🚩 連結 🔍 eask link add 🔍 eask link delete 🔍 eask link list 🚩 清理 🔍 eask clean workspace 🔍 eask clean elc 🔍 eask clean dist 🔍 eask clean autoloads 🔍 eask clean pkg-file 🔍 eask clean log-file 🔍 eask clean all 🚩 检查 🔍 eask lint package 🔍 eask lint checkdoc 🔍 eask lint elint 🔍 eask lint elisp-lint 🔍 eask lint elsa 🔍 eask lint indent 🔍 eask lint keywords 🔍 eask lint license 🔍 eask lint declare 🔍 eask lint regexps 🚩 測試框架 🔍 eask test activate 🔍 eask test ert 🔍 eask test ert-runner 🔍 eask test buttercup 🔍 eask test ecukes 🔍 eask test melpazoid 🚩 格式化 🔍 eask format elisp-autofmt 🔍 eask format elfmt 🚩 控制 DSL 🔍 eask source add 🔍 eask source delete 🔍 eask source list 🚩 實用工具 🔍 eask upgrade-eask 🔍 eask locate 🚩 檢查器 🔍 eask analyze 🚩 全域選項 🔍 \u0026ndash;global, -g 🔍 \u0026ndash;config, -c 🔍 \u0026ndash;all, -a 🔍 \u0026ndash;quick, -q 🔍 \u0026ndash;force, -f 🔍 \u0026ndash;debug 🔍 \u0026ndash;strict 🔍 \u0026ndash;allow-error 🔍 \u0026ndash;insecure 🔍 \u0026ndash;timestamps 🔍 \u0026ndash;log-level 🔍 \u0026ndash;log-file, \u0026ndash;lf 🔍 \u0026ndash;no-color 🔍 \u0026ndash;elapsed-time, \u0026ndash;et 🔍 \u0026ndash;verbose, -v \u0026lt;integer\u0026gt; 🔍 \u0026ndash;version 🔍 \u0026ndash;help 🚩 代理選項 🔍 \u0026ndash;proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;http-proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;https-proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;no-proxy \u0026lt;pattern\u0026gt; eask 程序的一般語法是：\n"},{"id":7,"href":"/zh-tw/Getting-Started/Directory-Structure/","title":"🏗️ 目錄結構","parent":"開始使用","content":" 目錄結構說明 從命令行運行 eask create package 生成器將創建 具有以下結構的目錄：\n. ├── .gitignore ├── Makefile ├── Eask ├── README.md └── {package-file}.el 目錄結構說明 以下是每個文件的高級概述。\n.gitignore\nGitignore 文件，忽略您不想從存儲庫中包含的文件。 默認情況下，它已經排除了 Eask 生成的 文件 和 目錄。\nMakefile\n已經包含包的基本測試的 Makefile。 它現在默認具有以下任務：\n測試構建（打包+安裝） 測試字節編譯 測試 checkdoc（樣式檢查器） 測試 lint（包 linter） README.md\n生成的文檔文件。 這用於顯示存儲庫中的主頁。\n{package-file}.el\n這是主要的包文件； 你應該在哪裡寫你的elisp代碼。 如果您嘗試創建多文件包； 您需要相應地編輯 Eask 文件。\n","description":" 目錄結構說明 從命令行運行 eask create package 生成器將創建 具有以下結構的目錄：\n. ├── .gitignore ├── Makefile ├── Eask ├── README.md └── {package-file}.el 目錄結構說明 以下是每個文件的高級概述。\n.gitignore\nGitignore 文件，忽略您不想從存儲庫中包含的文件。 默認情況下，它已經排除了 Eask 生成的 文件 和 目錄。\nMakefile\n已經包含包的基本測試的 Makefile。 它現在默認具有以下任務：\n測試構建（打包+安裝） 測試字節編譯 測試 checkdoc（樣式檢查器） 測試 lint（包 linter） README.md\n生成的文檔文件。 這用於顯示存儲庫中的主頁。\n{package-file}.el\n這是主要的包文件； 你應該在哪裡寫你的elisp代碼。 如果您嘗試創建多文件包； 您需要相應地編輯 Eask 文件。\n"},{"id":8,"href":"/zh-tw/Getting-Started/Advanced-Usage/","title":"🔧 進階用法","parent":"開始使用","content":" 🪝 Hooks 📇 加入你自己的指令 Eask 只是一個普通的 Emacs Lisp 文件，應該從 Emacs 本身讀取！ 你可以做：\n; 常規 Eask 文件內容... (setq byte-compile-error-on-warn t) ; 出現警告時信號錯誤 🪝 Hooks eask 提供了一些 hooks，使您能夠在每個命令之前和之後執行代碼。 hook 看起來像這樣：\neask-before-COMMAND-hook eask-after-COMMAND-hook 例如，在使用命令 eask compile 進行字節編譯時將警告視為錯誤：\n(add-hook \u0026#39;eask-before-compile-hook (lambda () (setq byte-compile-error-on-warn t))) 這也等同於選項 --strict：\n$ eask compile [FILES..] --strict 或者在每個命令上運行的 hooks：\neask-before-command-hook eask-after-command-hook (add-hook \u0026#39;eask-before-command-hook (lambda () (message \u0026#34;%s\u0026#34; (eask-command)))) ; print the current command 對於包含空格的子命令，將與/連接：\n$ eask lint checkdoc # lint/checkdoc $ eask generate license # generate/license 所以，\n(add-hook \u0026#39;eask-before-lint/checkdoc-hook (lambda () ;; 在 checkdoc linting 之前做一些事情... )) 📇 加入你自己的指令 您可以透過我們的 command 介面添加自己的命令：\n(eask-defcommand my-test-command \u0026#34;測試指令印出無用的訊息。\u0026#34; (message \u0026#34;這是一個測試指令!\u0026#34;)) ","description":" 🪝 Hooks 📇 加入你自己的指令 Eask 只是一個普通的 Emacs Lisp 文件，應該從 Emacs 本身讀取！ 你可以做：\n; 常規 Eask 文件內容... (setq byte-compile-error-on-warn t) ; 出現警告時信號錯誤 🪝 Hooks eask 提供了一些 hooks，使您能夠在每個命令之前和之後執行代碼。 hook 看起來像這樣：\neask-before-COMMAND-hook eask-after-COMMAND-hook 例如，在使用命令 eask compile 進行字節編譯時將警告視為錯誤：\n(add-hook \u0026#39;eask-before-compile-hook (lambda () (setq byte-compile-error-on-warn t))) 這也等同於選項 --strict：\n$ eask compile [FILES..] --strict 或者在每個命令上運行的 hooks：\neask-before-command-hook eask-after-command-hook (add-hook \u0026#39;eask-before-command-hook (lambda () (message \u0026#34;%s\u0026#34; (eask-command)))) ; print the current command 對於包含空格的子命令，將與/連接：\n"},{"id":9,"href":"/zh-tw/Contributing/","title":"貢獻","parent":"","content":"","description":""},{"id":10,"href":"/zh-tw/FAQ/","title":"常見問題","parent":"","content":"以下是一般常見問題列表。\n🔍 關於 Qob ❓ 誰應該使用這個工具？ ❓ 我在哪裡可以下載 Qob snapshot？ 🔍 技術選擇 ❓ 為什麼選擇 clingon? 🔍 關於 Qob ❓ 誰應該使用這個工具？ 這是我們的建議； 如果您打算使用特定於操作系統的軟件包（從不去其他平台），去尋找其他工具。 另一方面，Qob 旨在提供每個操作系統之間的最佳一致性。 或者，如果你想學習一個隨處可用的 工具，Qob 是最好的選擇之一。\n❓ 我在哪裡可以下載 Qob snapshot？ 您可以在我們的網站下載最新的可執行文件 (snapshot) cl-qob/binaries 代碼庫!\n🔍 技術選擇 ❓ 為什麼選擇 clingon? Common Lisp 的命令列解析器選項有限、所以我選擇了最成熟的，也是社群推薦的。\n","description":"以下是一般常見問題列表。\n🔍 關於 Qob ❓ 誰應該使用這個工具？ ❓ 我在哪裡可以下載 Qob snapshot？ 🔍 技術選擇 ❓ 為什麼選擇 clingon? 🔍 關於 Qob ❓ 誰應該使用這個工具？ 這是我們的建議； 如果您打算使用特定於操作系統的軟件包（從不去其他平台），去尋找其他工具。 另一方面，Qob 旨在提供每個操作系統之間的最佳一致性。 或者，如果你想學習一個隨處可用的 工具，Qob 是最好的選擇之一。\n❓ 我在哪裡可以下載 Qob snapshot？ 您可以在我們的網站下載最新的可執行文件 (snapshot) cl-qob/binaries 代碼庫!\n"},{"id":11,"href":"/zh-tw/License/","title":"MIT授權條款","parent":"","content":"在 MIT 下獲得許可。詳情見下文。\nCopyright (c) 2024 Jen-Chieh Shen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026#34;Software\u0026#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u0026#34;AS IS\u0026#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ","description":"在 MIT 下獲得許可。詳情見下文。\nCopyright (c) 2024 Jen-Chieh Shen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026#34;Software\u0026#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u0026#34;AS IS\u0026#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. "},{"id":12,"href":"/zh-tw/","title":"","parent":"","content":" CLI 建立, 執行, 測試, 和管理你的 Common Lisp 依賴 安裝 Qob 之後, 你就可以很輕鬆的開發任何 Common Lisp 包.\n開箱及用, Qob 支援 10+ 指令 來幫助整個你開發. 🔥\n開始使用 🏆 功能概述 Cask 的繼任者 Eask 與 Cask 非常相似！\nEask 擁有 Cask 的所有命令甚至更多！\n開箱及用 自帶 10+ 內置 linters 和 test runners，所以你不用擔心如何使用它!\nEask-file 是一個 elisp 文件 Eask 被視為 elisp 文件。\n您可以像在 Emacs 中那樣做任何事情！\n","description":" CLI 建立, 執行, 測試, 和管理你的 Common Lisp 依賴 安裝 Qob 之後, 你就可以很輕鬆的開發任何 Common Lisp 包.\n開箱及用, Qob 支援 10+ 指令 來幫助整個你開發. 🔥\n開始使用 🏆 功能概述 Cask 的繼任者 Eask 與 Cask 非常相似！\nEask 擁有 Cask 的所有命令甚至更多！\n開箱及用 自帶 10+ 內置 linters 和 test runners，所以你不用擔心如何使用它!\n"},{"id":13,"href":"/zh-tw/Getting-Started/Introduction/","title":"🚪 介紹","parent":"開始使用","content":"Eask 被構建為用作 Elisp 包中的包開發工具。 但是現在，Eask 支持各種類型的 Emacs Lisp 任務。 它可以通過三種主要方式使用：\nElisp 包的開發工具 配置的依賴管理 為所有其他目的運行 elisp 程序 那麼，除上述內容外，Eask 與其他構建工具（如 Cask、makem.sh 和 Eldev 之間的主要區別是什麼？\n好問題！ Eask 現在不僅僅是一個構建工具，它可以用於各種目的！ 但 Eask 的目標是：\n一致足以跨所有系統進行沙盒 通用足以讓 Emacsers 經常使用命令（byte-compile、checkdoc 等） 穩健即使在出現用戶錯誤的情況下也足以提供有用的結果 無依賴，使該工具可以在任何平台上運行 附言 有關更多詳細信息，請參閱為什麼使用 Eask？。\n❓ 為什麼選擇 Eask？ Eask 與 Cask 具有相同的理念，請參閱他們的網站 Why Cask? 以了解您為什麼應該這樣做, 使用 Eask（或 Cask）。\nCask、makem.sh 或 Eldev 等許多工具並不**“真正”**支持 Windows。 Cask 已經放棄了對舊版 Windows 的支持，makem.sh 在 bash 上運行，Eldev 確實支持 Windows， 但作者沒有在 Windows 上使用它（沒有完整的測試，請參閱他們的 [CI 工作流程]（https //github.com/doublep/eldev/actions/workflows/test.yml））。 Eask 旨在適配所有平台，包括 Linux、macOS 和 Windows。 它側重於跨平台能力和每個 操作系統之間的一致性。 如果 Eask 可以在您的機器上運行，那麼它也可以在任何平台上運行。\n這是我們的建議； 如果您打算在特定於操作系統的軟件包上工作（從不使用其他平台），請使用其他工具。 另一方面，Eask 旨在提供每個操作系統之間的最佳一致性。 或者，如果你想學習一個隨處可用的工具， Eask 是最好的選擇之一。\n⚖️ 比較 該表是通過閱讀這些項目的文檔和源代碼編制的，但作者不是這些工具的專家。 歡迎指正。\n🔍 專案方面 該表顯示了作者選擇的技術以及項目的構建方式。 此外，他們做出了哪些技術決策？ 放棄支持？ 項目佈局？ 等等。\nEask Cask Eldev makem.sh bin folder binary, bash, bat bash, bat bash, bat, ps1 bash Cross-Platform ✅ ❌, 不支援 Windows ✅ ❌, 不支援 Windows Emacs version 26.1+ 24.5+ 24.4+ 26.1+ Size 9,000+ 行 3,000+ 行 8,000+ 行 1,200+ 行 Executable ✅ ❌ ❌ ❌ Pure Elisp ❌, JavaScript ✅ ✅ ✅ CLI Parser yargs commander 內建 內建 💡 makem.sh 也有很好的比較文檔，請訪問他們的站點 🔍 功能方面 這是每個工具之間的功能比較。 每種工具都有其優點； 選擇適合您的工具！\n如果這些功能沒有在下面列出，要么被遺忘，要么只是被認為太重要了，所以每個工具都有它； 因此我們不將它們添加到列表中。\nEask Cask Eldev makem.sh Elisp configuration ✅, DSL 是可選的 ❌, 僅 DSL ✅, 純 elisp ❌ Handle archives failure ✅, see archives ❌ ❌ ❌ create project, etc ✅ ❌ ❌ ❌ link local dependencies ✅ ✅ ✅ ❌ exec program ✅ ✅ ❌ ❌ eval expressions ✅ ✅ ✅ ❌ emacs execution ✅ ✅ ❌ ❌ Built-in linters ✅ ❌ ✅ ❌ Built-in tests ✅ ❌ ✅ ❌ Run script ✅ ❌ ❌ ❌ Self-defined commands ✅ ❌ ✅ ❌ Subcommand ✅ ❌ ❌ ❌ 📰 消息 0.9.x - Improve UX in general 0.8.x - Add link command 0.7.x - Fix default-directory isn\u0026rsquo;t honored by -g option 0.6.x - You can now use eask create to create an Elisp project 0.5.x - Handle error for failed archive 0.4.x - Add color logger 0.3.x - Add verbosity level and timestamps 0.2.x - Done basic error handling with exit code at the end of executions 0.1.39 - Use spawn instead exec; now messages will be printed immediately 0.1.x - Project bare-bones are pretty much complete! 📝 TODO 事項列表 請參考這.\n📂 基礎項目 Eask 的設計深受以下項目的影響：\nCask - Emacs 的項目管理工具 makem.sh -用於構建和測試 Emacs Lisp 包的類似 Makefile 的腳本 epm - Emacs 包管理器 Eldev - Elisp 開發工具 ","description":"Eask 被構建為用作 Elisp 包中的包開發工具。 但是現在，Eask 支持各種類型的 Emacs Lisp 任務。 它可以通過三種主要方式使用：\nElisp 包的開發工具 配置的依賴管理 為所有其他目的運行 elisp 程序 那麼，除上述內容外，Eask 與其他構建工具（如 Cask、makem.sh 和 Eldev 之間的主要區別是什麼？\n好問題！ Eask 現在不僅僅是一個構建工具，它可以用於各種目的！ 但 Eask 的目標是：\n一致足以跨所有系統進行沙盒 通用足以讓 Emacsers 經常使用命令（byte-compile、checkdoc 等） 穩健即使在出現用戶錯誤的情況下也足以提供有用的結果 無依賴，使該工具可以在任何平台上運行 附言 有關更多詳細信息，請參閱為什麼使用 Eask？。\n❓ 為什麼選擇 Eask？ Eask 與 Cask 具有相同的理念，請參閱他們的網站 Why Cask? 以了解您為什麼應該這樣做, 使用 Eask（或 Cask）。\n"},{"id":14,"href":"/zh-tw/tags/","title":"Tags","parent":"","content":"","description":""},{"id":15,"href":"/zh-tw/tos/","title":"法律聲明和隱私","parent":"","content":" 聯繫信息 Jen-Chieh Shen Email: jcs090219@gmail.com\n隱私政策 一般數據和信息的收集 當數據主體或自動化系統調用該網站時，cl-qob.github.io 網站會收集一系列一般數據和信息。 這些一般數據和信息存儲在服務器日誌文件中。 收集的可能是：\n使用的瀏覽器類型和版本 訪問系統使用的操作系統 訪問系統訪問我們網站的網站（所謂的推薦人） 子網站 訪問網站的日期和時間 一個互聯網協議地址（IP地址） 接入系統的互聯網服務提供商 在我們的信息技術系統受到攻擊時可能會使用的任何其他類似數據和信息 使用這些一般數據和信息時，我們不會得出任何結論關於數據主體。 相反，需要此信息來提供正確瀏覽我們 網站的內容並回答您的要求 (Article 6.1b GDPR).\n由於分析，您的 IP 地址和請求的 URL 最多可存儲 7 天網頁可能出現的問題。 鑑於出現問題有在某些情 況下，此信息的存儲時間可能超過 7 天深入分析問題。 一經確認將立即刪除他們無法進一步幫助診斷問題 或解決問題。 (Article 6.1f GDPR).\nCookies 該網頁不使用任何 cookie。\n","description":" 聯繫信息 Jen-Chieh Shen Email: jcs090219@gmail.com\n隱私政策 一般數據和信息的收集 當數據主體或自動化系統調用該網站時，cl-qob.github.io 網站會收集一系列一般數據和信息。 這些一般數據和信息存儲在服務器日誌文件中。 收集的可能是：\n使用的瀏覽器類型和版本 訪問系統使用的操作系統 訪問系統訪問我們網站的網站（所謂的推薦人） 子網站 訪問網站的日期和時間 一個互聯網協議地址（IP地址） 接入系統的互聯網服務提供商 在我們的信息技術系統受到攻擊時可能會使用的任何其他類似數據和信息 使用這些一般數據和信息時，我們不會得出任何結論關於數據主體。 相反，需要此信息來提供正確瀏覽我們 網站的內容並回答您的要求 (Article 6.1b GDPR).\n由於分析，您的 IP 地址和請求的 URL 最多可存儲 7 天網頁可能出現的問題。 鑑於出現問題有在某些情 況下，此信息的存儲時間可能超過 7 天深入分析問題。 一經確認將立即刪除他們無法進一步幫助診斷問題 或解決問題。 (Article 6.1f GDPR).\nCookies 該網頁不使用任何 cookie。\n"}]