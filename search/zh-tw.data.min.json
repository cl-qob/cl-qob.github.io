[{"id":0,"href":"/zh-tw/Contributing/Developing-Qob/","title":"🔨 開發 Qob","parent":"貢獻","content":" 🚩 必備條件 📝 建構 📈 測試 🚩 必備條件 要更改 Qob，您應該：\nSBCL 為 lisp 實作。 Make 用於編譯系統。 Quicklisp 為 CL 套件管理員。 📝 建構 若要建立開發環境，您必須使用 build from source 方法安裝 Qob。請確定您已設定環境 PATH 變數，因此您可以從終端機呼叫 qob。\n完成安裝後，嘗試：\n$ qob locate 它應該會列印出 qob 可執行檔的位置。即使您已安裝多個 Qob 版本，也應該可以辨識 Qob 可執行檔的位置！\n📈 測試 Qob 不提供本地測試，我們所有的測試都是使用 GitHub 完成的動作。 請 fork 我們的存儲庫 並將您的更改推送到您的 fork。 GitHub 行動應該為你拿起測試！\n確保您的存儲庫（分叉）中啟用了 GitHub Actions。 必須 設置 -\u0026gt; 操作 -\u0026gt; 常規 -\u0026gt; 操作權限； 確保您已經檢查了正確的選項。\n","description":" 🚩 必備條件 📝 建構 📈 測試 🚩 必備條件 要更改 Qob，您應該：\nSBCL 為 lisp 實作。 Make 用於編譯系統。 Quicklisp 為 CL 套件管理員。 📝 建構 若要建立開發環境，您必須使用 build from source 方法安裝 Qob。請確定您已設定環境 PATH 變數，因此您可以從終端機呼叫 qob。\n"},{"id":1,"href":"/zh-tw/Contributing/Documentation/","title":"✒️ 文檔","parent":"貢獻","content":" 🚩 必備條件 📐 設置 Qob 包含全面的用戶指南。 請嘗試相應地擴展它您實施新功能。\n該文檔使用 Hugo 和 GitHub Pages 以 Markdown 編寫。 前者是靜態站點生成器，後者是靜態網頁託管服務來自 GitHub。\n💡 您可以在 docs/content/ 文件夾下找到我們所有的文檔。 🚩 必備條件 要更改文檔，您應該：\nhugo 可執行； 靜態站點生成器。 📐 設置 要在本地設置網站，您需要先安裝主題：\n# 克隆代碼庫和子模塊一起... git clone https://github.com/cl-qob/cli --recurse-submodules # 導航到 `docs/theme/geekdoc` 文件夾 cd ./docs/theme/geekdoc/ # 構建主題 npm install \u0026amp;\u0026amp; npm run build 然後運行 hugo 命令：\n# 導航回 `docs` 文件夾 cd ./docs/ # 在本地運行 hugo 服務器 hugo server 就是這樣！ 現在您可以在瀏覽器裡面打開 localhost:1313。 🎉\n💡 如果你考慮寫草稿，你可以指定 -D 選項。 ","description":" 🚩 必備條件 📐 設置 Qob 包含全面的用戶指南。 請嘗試相應地擴展它您實施新功能。\n該文檔使用 Hugo 和 GitHub Pages 以 Markdown 編寫。 前者是靜態站點生成器，後者是靜態網頁託管服務來自 GitHub。\n💡 您可以在 docs/content/ 文件夾下找到我們所有的文檔。 🚩 必備條件 要更改文檔，您應該：\nhugo 可執行； 靜態站點生成器。 📐 設置 要在本地設置網站，您需要先安裝主題：\n"},{"id":2,"href":"/zh-tw/Contributing/PR/","title":"📭 提交 PR","parent":"貢獻","content":"如果所有測試都通過，Qob 可以在更新後正常運行文檔（如果有），請向我們發送 pull request 隨著你的改變。 🎊\n🧪 測試說明 這已移至存儲庫 README.md 文件。\n請訪問 https://github.com/cl-qob/cli#-testing。\n","description":"如果所有測試都通過，Qob 可以在更新後正常運行文檔（如果有），請向我們發送 pull request 隨著你的改變。 🎊\n🧪 測試說明 這已移至存儲庫 README.md 文件。\n請訪問 https://github.com/cl-qob/cli#-testing。\n"},{"id":3,"href":"/zh-tw/Getting-Started/Quick-Start/","title":"🔰 快速開始","parent":"開始使用","content":" 🔍 步驟 1: 下載預先建立的檔案 🔍 步驟 2: 導航到現有項目或創建新項目 🔍 步驟 3： 創建 Qob 文件 🔍 步驟 4: 開始包開發 🔍 步驟 5: 管理系統 dist 🔍 步驟 6: 添加一些依賴 🔍 步驟 7: 安裝依賴 🔗 也可以看看 使用 Qob 作為您的 Lisp 系統管理工具。\n需要安裝 Git 才能運行本教程。 🔍 步驟 1: 下載預先建立的檔案 請參閱預建置檔案部分。\n💡 如果遇到任何問題，請嘗試 從原始碼建立。 驗證您的新安裝：\n$ qob --version 🔍 步驟 2: 導航到現有項目或創建新項目 如果您已有一個現有的 elisp 項目，請導航到項目根文件夾。\n$ cd /path/to/project/dir/ 創建一個：\n$ qob create cl-project \u0026lt;your-project\u0026gt; 它應該在您當前的工作目錄中創建一個名為 \u0026lt;your-project\u0026gt; 的文件夾。\n🔍 步驟 3： 創建 Qob 文件 接著創建項目中創建 Qob 文件：\n$ qob init 您應該能夠在項目文件夾中看到一個 Qob 文件。 🎉🎊\n🔍 步驟 4: 開始包開發 要檢查您的包裹信息，請運行：\n$ qob info 您應該能夠看到以下信息：\nyour-package (1.0.0) | deps: 0 Your project description! https://example.com/project-url/ Author: Your Name License: MIT 從一開始，您就不會有任何 dependencies（默認為 0）！\n🔍 步驟 5: 管理系統 dist 您可以使用 Qob 文件中的 source 指令來系統 dist。\n(source \u0026#34;quicklisp\u0026#34;) ; 默認 dist (source \u0026#34;ultralisp\u0026#34;) ; 新增 dist 💡 有關更多信息，請參閱 DSL/source！ 🔍 步驟 6: 添加一些依賴 現在您可以在 ASD 檔案中加入依賴。\n(defsystem \u0026#34;your-project\u0026#34; ... :depends-on (flx str clingon) ; 在這新增依賴! ... 您可以在 Qob 文件中使用 depends-on 指令添加當地依賴。\n... (depends-on \u0026#34;fsdb\u0026#34; \u0026#34;https://github.com/billstclair/fsdb\u0026#34; :git) 💡 確認您新增的相依性在其中一個 dist 中可用！ 🔍 步驟 7: 安裝依賴 現在我們可以安裝我們在 ASD 和 Qob 文件中指定的依賴項：\n$ qob install-deps 您應該會看到 Qob 正確執行，輸出類似如下：\nLoading ASDF files... done ✓ Installing 1 system... - [1/1] Installing fsdb from https://github.com/billstclair/fsdb... done ✓ (Total of 1 system installed; 0 skipped) Installing 3 systems... - [1/3] Installing flx (0)... done ✓ - [2/3] Installing str (0)... done ✓ - [3/3] Installing clingon (0)... done ✓ (Total of 3 systems installed; 0 skipped) 🔗 也可以看看 Commands and options Domain Specific Language Basic Usage ","description":" 🔍 步驟 1: 下載預先建立的檔案 🔍 步驟 2: 導航到現有項目或創建新項目 🔍 步驟 3： 創建 Qob 文件 🔍 步驟 4: 開始包開發 🔍 步驟 5: 管理系統 dist 🔍 步驟 6: 添加一些依賴 🔍 步驟 7: 安裝依賴 🔗 也可以看看 使用 Qob 作為您的 Lisp 系統管理工具。\n需要安裝 Git 才能運行本教程。 🔍 步驟 1: 下載預先建立的檔案 請參閱預建置檔案部分。\n"},{"id":4,"href":"/zh-tw/Getting-Started/","title":"開始使用","parent":"","content":"","description":""},{"id":5,"href":"/zh-tw/Getting-Started/Finding-Lisp/","title":"🔭 尋找 Lisp","parent":"開始使用","content":"預設情況下，套件是為預設的 SBCL 安裝的，也就是在 sbcl 指令後面的那個。若要選擇不同的 lisp 實作， 請將環境變數 QOB_LISP 設定為要使用的 lisp 實作的指令名稱或執行路徑：\nSteel Bank Common Lisp (SBCL):\n$ QOB_LISP=\u0026#34;sbcl-2.2.9\u0026#34; qob command Clozure CL (CCL):\n$ QOB_LISP=\u0026#34;ccl-1.12\u0026#34; qob command Embeddable Common Lisp (ECL):\n$ QOB_LISP=\u0026#34;ecl-1.12\u0026#34; qob command 請注意，安裝的相依性是以 lisp 實作的版本為範圍。因此，在不同版本之間切換時，您必須為每個版本安裝相依性：\n$ QOB_LISP=\u0026#34;sbcl-2.2.9\u0026#34; qob install ","description":"預設情況下，套件是為預設的 SBCL 安裝的，也就是在 sbcl 指令後面的那個。若要選擇不同的 lisp 實作， 請將環境變數 QOB_LISP 設定為要使用的 lisp 實作的指令名稱或執行路徑：\nSteel Bank Common Lisp (SBCL):\n$ QOB_LISP=\u0026#34;sbcl-2.2.9\u0026#34; qob command Clozure CL (CCL):\n$ QOB_LISP=\u0026#34;ccl-1.12\u0026#34; qob command Embeddable Common Lisp (ECL):\n$ QOB_LISP=\u0026#34;ecl-1.12\u0026#34; qob command 請注意，安裝的相依性是以 lisp 實作的版本為範圍。因此，在不同版本之間切換時，您必須為每個版本安裝相依性：\n$ QOB_LISP=\u0026#34;sbcl-2.2.9\u0026#34; qob install "},{"id":6,"href":"/zh-tw/Getting-Started/Install-Qob/","title":"💾 安裝 Qob","parent":"開始使用","content":"本文檔將指導您完成 Qob 的安裝。\n安裝 Qob 在 macOS、Linux、Windows、BSD、 等常見的作業系統。\n💾 預建置檔案 💾 使用終端 💾 包管理器 📦 Nix (macOS 或 Linux) 📦 Homebrew (macOS 或 Linux) 📦 MacPorts (macOS) 📦 Debian (Linux) 📦 Snap (Linux) 📦 Chocolatey (Windows) 📦 Scoop (Windows) 📦 Winget (Windows) 💾 從原始碼構建 🚩 前置工具 🏡 設定（透過可執行檔） 💾 預建置檔案 從 Qob Releases 下載適合您平台的版本。 下載後，二進製文件可以從任何地方運行。 您無需將其安裝在全球位置。 這適用於您沒有特權帳戶的共享主機和其他系統。\n理想情況下，您應該將它安裝在 PATH 中的某個位置以便於使用。 /usr/local/bin 是最有可能的位置。\n💾 使用終端 在 macOS 或 Linux:\n$ curl -fsSL https://raw.githubusercontent.com/cl-qob/cli/master/webinstall/install.sh | sh 在 Windows:\n$ curl.exe -fsSL https://raw.githubusercontent.com/cl-qob/cli/master/webinstall/install.bat | cmd /Q 💾 包管理器 📦 Nix (macOS 或 Linux) Nix 是一個適用於 macOS 和 Linux 的免費開源套件管理器。 若要安裝 Qob CLI，請執行下列操作：\n$ nix profile install nixpkgs#qob-cli 📦 Homebrew (macOS 或 Linux) Homebrew 是一個適用於 macOS 和 Linux 的免費開源套件管理器。 若要安裝 Qob CLI，請執行下列操作：\n$ brew tap cl-qob/cli https://github.com/cl-qob/packaging $ brew install qob-cli 📦 MacPorts (macOS) MacPorts 是一款適用於 macOS 的免費開源套件管理器。 若要安裝 Qob CLI，請執行下列操作：\n$ sudo port install qob-cli 📦 Debian (Linux) Linux Debian 發行版的衍生版本包括 elementary OS、KDE neon、 Linux Lite、Linux Mint、MX Linux、Pop!_OS、Ubuntu、 Zorin OS 等。\n$ sudo curl -SsL -o /etc/apt/trusted.gpg.d/qobsource.gpg https://raw.githubusercontent.com/cl-qob/packaging/master/debian/KEY.gpg $ sudo curl -SsL -o /etc/apt/sources.list.d/qobsource.list https://raw.githubusercontent.com/cl-qob/packaging/master/debian/qobsource.list $ sudo apt update --allow-insecure-repositories $ sudo apt install qob-cli --allow-unauthenticated 您也可以直接從 packaging 代碼庫下載 Debian 軟體包。\n📦 Snap (Linux) Snap 是一款適用於 Linux 的免費開源套件管理器。 snap 套件適用於大多數發行版，安裝簡單且會自動更新。\n$ sudo snap install qob-cli 📦 Chocolatey (Windows) 如果您的計算機上安裝了 Chocolatey，則可以使用以下一行代碼安裝 Qob：\n$ choco install qob-cli 📦 Scoop (Windows) Scoop 是一個適用於 Windows 的免費開源套件管理器。 若要安裝 Qob CLI，請執行下列操作：\n$ scoop bucket add cl-qob/cli https://github.com/cl-qob/packaging $ scoop install qob-cli 📦 Winget (Windows) Winget是微軟官方的 Windows 免費開源軟體套件管理器。 若要安裝 Qob CLI，請執行下列操作：\n$ winget install qob.cli 💾 從原始碼構建 🚩 前置工具 Git SBCL Quicklisp 或者，您可以直接從這個代碼庫克隆它:\n# 克隆這個代碼庫 $ git clone https://github.com/cl-qob/cli qob-cli # 將工作目錄更改為 qob-cli $ cd qob-cli # 建構執行檔到 `bin` 資料夾 $ make build 🏡 設定（透過可執行檔） 現在您可以使用可執行檔 bin/qob 執行 qob；將 /path/to/qob-cli/bin/ 加入您的環境 PATH 以從任何位置執行 qob！\n在 Linux/macOS 上、\nexport PATH=\u0026#34;path/to/qob-cli/bin:$PATH\u0026#34; 在 Windows 上、\nset PATH=%PATH%;c:/path/to/qob-cli/bin 正確設定後，嘗試 qob --version 即可看到目前 qob 的版本號碼！🎉 🎊\n","description":"本文檔將指導您完成 Qob 的安裝。\n安裝 Qob 在 macOS、Linux、Windows、BSD、 等常見的作業系統。\n💾 預建置檔案 💾 使用終端 💾 包管理器 📦 Nix (macOS 或 Linux) 📦 Homebrew (macOS 或 Linux) 📦 MacPorts (macOS) 📦 Debian (Linux) 📦 Snap (Linux) 📦 Chocolatey (Windows) 📦 Scoop (Windows) 📦 Winget (Windows) 💾 從原始碼構建 🚩 前置工具 🏡 設定（透過可執行檔） 💾 預建置檔案 從 Qob Releases 下載適合您平台的版本。 下載後，二進製文件可以從任何地方運行。 您無需將其安裝在全球位置。 這適用於您沒有特權帳戶的共享主機和其他系統。\n"},{"id":7,"href":"/zh-tw/Examples/System-Development/","title":"📦 System 開發","parent":"範例","content":"Qob 是魔法文件，qob 會將其讀取為 Lisp 實踐中的初始化文件。\n;; -*- mode: lisp; lexical-binding: t -*- (files \u0026#34;lisp\u0026#34; \u0026#34;scripts\u0026#34; \u0026#34;Makefile\u0026#34; \u0026#34;LICENSE\u0026#34; \u0026#34;Qob\u0026#34;) (source \u0026#34;quicklisp\u0026#34;) (source \u0026#34;ultralisp\u0026#34;) ","description":"Qob 是魔法文件，qob 會將其讀取為 Lisp 實踐中的初始化文件。\n;; -*- mode: lisp; lexical-binding: t -*- (files \u0026#34;lisp\u0026#34; \u0026#34;scripts\u0026#34; \u0026#34;Makefile\u0026#34; \u0026#34;LICENSE\u0026#34; \u0026#34;Qob\u0026#34;) (source \u0026#34;quicklisp\u0026#34;) (source \u0026#34;ultralisp\u0026#34;) "},{"id":8,"href":"/zh-tw/DSL/","title":"领域特定语言","parent":"","content":"本文檔是關於 [DSL] (https://en.wikipedia.org/wiki/Domain-specific_language)。\n🚩 Package contents 🔍 files (\u0026amp;rest patterns) 🚩 測試 🔍 script (name command \u0026amp;rest args) 🚩 依賴 🔍 source (alias) 🔍 source (name url) 🔍 depends-on (\u0026amp;rest args) 🚩 Package contents 🔍 files (\u0026amp;rest patterns) 指定包含在此專案中的檔案清單。\n(files \u0026#34;foo.el\u0026#34;) (files \u0026#34;*.el\u0026#34; \u0026#34;core/*.el\u0026#34;) 🚩 測試 🔍 script (name command \u0026amp;rest args) 新增內建指令碼及其預設生命週期事件，以及任意指令碼。\n(script \u0026#34;test\u0026#34; \u0026#34;echo This is a test!\u0026#34;) 🚩 依賴 🔍 source (alias) 🔍 source (name url) 新增一個系統 dist 來安裝相依性。\n(source \u0026#34;quicklisp\u0026#34;) (source \u0026#34;quicklisp\u0026#34; \u0026#34;http://beta.quicklisp.org/\u0026#34;) 可用別名：\nquicklisp (http://beta.quicklisp.org/) ultralisp (http://dist.ultralisp.org/) 🔍 depends-on (\u0026amp;rest args) 指定此系統的相依性。\n(depends-on \u0026#34;fsdb\u0026#34; \u0026#34;https://github.com/billstclair/fsdb\u0026#34; :git) 💡 使用 qob install-deps 指令安裝相依性！ ","description":"本文檔是關於 [DSL] (https://en.wikipedia.org/wiki/Domain-specific_language)。\n🚩 Package contents 🔍 files (\u0026amp;rest patterns) 🚩 測試 🔍 script (name command \u0026amp;rest args) 🚩 依賴 🔍 source (alias) 🔍 source (name url) 🔍 depends-on (\u0026amp;rest args) 🚩 Package contents 🔍 files (\u0026amp;rest patterns) 指定包含在此專案中的檔案清單。\n"},{"id":9,"href":"/zh-tw/Getting-Started/Basic-Usage/","title":"🔨 使用基礎","parent":"開始使用","content":"Qob 的 CLI 功能齊全但易於使用，即使對於那些使用命令行的經驗非常有限的人也是如此。\n以下是您在開發 Qob 項目時將使用的最常用命令的說明。 請參閱 命令和選項 以全面了解 Qob 的 CLI。\n一旦你安裝了 Qob，確保它在你的 PATH 中。 您可以通過 help 命令測試 Qob 是否已正確安裝：\n$ qob --help 您在控制台中看到的輸出應類似於以下內容：\nNAME: qob - CLI for building, running, testing, and managing your Common Lisp dependencies USAGE: qob [global-options] [\u0026lt;command\u0026gt;] [command-options] [arguments ...] OPTIONS: --help display usage information and exit --no-color enable/disable color output --version display version and exit -a, --all enable all flag -g, --global change default workspace to ~/.qob/ -v, --verbose \u0026lt;INT\u0026gt; set verbosity from 0 to 5 [default: 3] COMMANDS: build Build the executable clean Delete various files produced during building create Create a new Common Lisp project dists List out all installed dists eval Evaluate lisp form with a proper PATH files Print all system files package Build a system artifact info Display information about the current system(s) init Initialize project to use Qob install Install systems install-deps Automatically install system dependencies install-dists Install dists list List the registered systems load Load lisp files locate Print out Qob installed location status Display the state of the workspace uninstall Uninstall systems AUTHORS: Jen-Chieh Shen \u0026lt;jcs090218@gmail.com\u0026gt; LICENSE: MIT 🗃️ qob 命令 最常見的用法可能是在當前目錄作為輸入目錄的情況下運行 qob。 然後你運行 qpb 後跟一個子命令：\n$ qob info # 打印出 Qob 文件信息 Notice the subcommand can be nested:\n$ qpb clean workspace # 刪除你的 .qob 文件夾 傳遞選項 --help 以查找有關您正在使用的命令的更多信息：\n$ qob clean --help 輸出，它顯示支持 2 個子命令：\nNAME: qob clean - Delete various files produced during building USAGE: qob clean \u0026lt;type\u0026gt; OPTIONS: --help display usage information and exit --no-color enable/disable color output --version display version and exit -a, --all enable all flag -g, --global change default workspace to ~/.qob/ -v, --verbose \u0026lt;INT\u0026gt; set verbosity from 0 to 5 [default: 3] COMMANDS: all Do all cleaning tasks dist Delete dist subdirectory workspace, .qob Clean up .qob directory 以下是已知的嵌套子命令列表：\nqob create qob clean 📌 了解你的 quicklisp 目錄 Qob 會建立一個隔離的環境，因此在播放、測試和執行您的 lisp 系統後， 它不會產生任何副作用。但重要的是，要知道目前的 Qob session 指向哪個 quicklisp 目錄 (通常與 ~/quicklisp/ 相同)，這樣才能釋放這個工具的全部潛力！\n以下是 Qob 在不同場景下的幕後工作方式：\n名稱 描述 選項 路徑 local 默認行為，使用 Qob 作為系統開發工具 n/a ./.qob/ global Qob 作為通用工具使用，與其他範圍無關 -g or --global ~/ 根據預設，Qob 會在本地範圍內安裝系統，將您的開發環境與全局系統隔離。 這允許您使用釘住的版本建立 Common Lisp 應用程式，而不會污染您的全局系統。\n如果指定了 -g 或 --global 選項，您就可以像管理本地系統一樣管理您的全局系統。\n","description":"Qob 的 CLI 功能齊全但易於使用，即使對於那些使用命令行的經驗非常有限的人也是如此。\n以下是您在開發 Qob 項目時將使用的最常用命令的說明。 請參閱 命令和選項 以全面了解 Qob 的 CLI。\n一旦你安裝了 Qob，確保它在你的 PATH 中。 您可以通過 help 命令測試 Qob 是否已正確安裝：\n$ qob --help 您在控制台中看到的輸出應類似於以下內容：\nNAME: qob - CLI for building, running, testing, and managing your Common Lisp dependencies USAGE: qob [global-options] [\u0026lt;command\u0026gt;] [command-options] [arguments ...] OPTIONS: --help display usage information and exit --no-color enable/disable color output --version display version and exit -a, --all enable all flag -g, --global change default workspace to ~/.qob/ -v, --verbose \u0026lt;INT\u0026gt; set verbosity from 0 to 5 [default: 3] COMMANDS: build Build the executable clean Delete various files produced during building create Create a new Common Lisp project dists List out all installed dists eval Evaluate lisp form with a proper PATH files Print all system files package Build a system artifact info Display information about the current system(s) init Initialize project to use Qob install Install systems install-deps Automatically install system dependencies install-dists Install dists list List the registered systems load Load lisp files locate Print out Qob installed location status Display the state of the workspace uninstall Uninstall systems AUTHORS: Jen-Chieh Shen \u0026lt;jcs090218@gmail.com\u0026gt; LICENSE: MIT 🗃️ qob 命令 最常見的用法可能是在當前目錄作為輸入目錄的情況下運行 qob。 然後你運行 qpb 後跟一個子命令：\n"},{"id":10,"href":"/zh-tw/Getting-Started/Commands-and-options/","title":"🚩 命令和選項","parent":"開始使用","content":" 🚩 創建 🔍 qob create cl-project 🚩 核心 🔍 qob init 🔍 qob info 🔍 qob status 🔍 qob install-deps 🔍 qob install 🔍 qob uninstall 🔍 qob package 🔍 qob files 🚩 執行 🔍 qob load 🔍 qob exec 🔍 qob eval 🚩 管理 🔍 qob dists 🔍 qob install-dists 🔍 qob search 🔍 qob list 🚩 連結 🔍 qob link add 🔍 qob link delete 🔍 qob link list 🚩 清潔 🔍 qob clean workspace 🔍 qob clean dist 🔍 qob clean all 🚩 實用工具 🔍 qob locate 🚩 全域選項 🔍 \u0026ndash;global, -g 🔍 \u0026ndash;all, -a 🔍 \u0026ndash;allow-error 🔍 \u0026ndash;timestamps 🔍 \u0026ndash;log-level 🔍 \u0026ndash;log-file, \u0026ndash;lf 🔍 \u0026ndash;no-color 🔍 \u0026ndash;elapsed-time, \u0026ndash;et 🔍 \u0026ndash;verbose, -v \u0026lt;integer\u0026gt; 🔍 \u0026ndash;version 🔍 \u0026ndash;help qob 程式的一般語法為\n$ qob [GLOBAL-OPTIONS] [COMMAND] [COMMAND-OPTIONS] [COMMAND-ARGUMENTS] [命令 🚩 創建 🔍 qob create cl-project 建立新的 Common Lisp 專案\n$ qob [GLOBAL-OPTIONS] create cl-project \u0026lt;name 💡 更多資訊請參閱 https://github.com/fukamachi/cl-project。 🚩 核心 經常使用未分類的指令。\n🔍 qob init 初始化目前目錄以開始使用 Qob。\n$ qob [GLOBAL-OPTIONS] init Qob 會產生這樣的檔案\n;; -*- mode: lisp; lexical-binding: t -*- (source 「quicklisp」) 🔍 qob info 顯示專案或組態的相關資訊。\n$ qob [GLOBAL-OPTIONS] info 🔍 qob status 顯示工作區的狀態。\n$ qob [GLOBAL-OPTIONS] status 🔍 qob install-deps 安裝所有的依賴項目。\n$ qob [GLOBAL-OPTIONS] install-deps 🔍 qob install 要安裝系統\n$ qob [GLOBAL-OPTIONS] install [SYSTEMS..］ 透過指定參數安裝系統：\n$ qob install clingon clack 否則，它會從目前的開發中安裝系統：\n$ qob install 🔍 qob uninstall 要解除安裝/刪除系統。\n$ qob [GLOBAL-OPTIONS] uninstall [SYSTEMS.］ 透過指定參數來解除安裝系統：\n$ qob uninstall cl-autorepo cl-project 否則會從目前的開發中卸載系統：\n$ qob uninstall 🔍 qob package 建立系統工件。\n$ qob package [DESTINATION] (目的地) 如果沒有指定 [DESTINATION]，預設會產生到 /dist 資料夾。\n🔍 qob files 列印所有系統檔案。\n$ qob files [DESTINATION] 🚩 執行 指令允許您在 Qob 核心之上執行。\n基本上，這允許您做任何您想做的事！\n🔍 qob load 依序載入 Common Lisp 檔案。\n$ qob [GLOBAL-OPTIONS] load [FILES...］ 🔍 qob exec 使用給定的參數執行系統指令。\n$ qob [GLOBAL-OPTIONS] exec [COMMAND] [ARGUMENTS ...]。 🔍 qob eval 評估 FORM 為 lisp 表格。\n$ qob [GLOBAL-OPTIONS] eval [FORM] 。 🚩 管理 可協助您管理套件相依性的指令。\n🔍 qob dists 列出所有已安裝的 dists。\n$ qob [GLOBAL-OPTIONS] dists 🔍 qob install-dists 安裝 dists.\n$ qob [GLOBAL-OPTIONS] install-dists [NAMES..] 🔍 qob search 從歸檔中搜尋系統。\n$ qob [GLOBAL-OPTIONS] search [QUEIRES.］ 🔍 qob list 列出系統。\n$ qob [GLOBAL-OPTIONS] list [--depth] 列出系統。 🚩 連結 在本系統與本機檔案系統上的依賴之間建立連結。 連結的相依性可以避免從遠端存檔下載相依性。 連結的系統必須有 Qob 檔案 或 ASD 檔案。\n🔍 qob link add 將指定的 source 目錄連結到本專案的系統目錄、 在指定的 system 名下。\n$ qob [GLOBAL-OPTIONS] link add \u0026lt;NAME\u0026gt; \u0026lt;PATH 🔍 qob link delete 刪除指定系統的連結。\n$ qob [GLOBAL-OPTIONS] link delete [NAMES.］ 🔍 qob link list 列出所有連結。\n$ qob [GLOBAL-OPTIONS] link list 🚩 清潔 刪除建立過程中產生的各種檔案。\n🔍 qob clean workspace 從目前的工作區刪除 .qob。\n別名: .qob\n$ qob [GLOBAL-OPTIONS] clean workspace 🔍 qob clean dist 刪除 dist 子目錄。\n$ qob [GLOBAL-OPTIONS] clean dist 🔍 qob clean all 此指令是所有其他清除指令的組合。\nclean workspace clean dist $ qob [GLOBAL-OPTIONS] clean all 🚩 實用工具 其他輔助指令。\n🔍 qob locate 顯示 Qob 安裝位置。\n$ qob [GLOBAL-OPTIONS] locate 🚩 全域選項 下列選項適用於所有 Qob 指令：\n🔍 \u0026ndash;global, -g 這將使用 ~/.qob/ 而非套件開發環境。\n$ qob -g [COMMAND] 🔍 \u0026ndash;all, -a 啟用 all 旗標。\n$ qob -a [COMMAND] 🔍 \u0026ndash;allow-error 繼續執行而不終止程式。\n🔍 \u0026ndash;timestamps 啟用/停用時間戳記。\n🔍 \u0026ndash;log-level 啟用/停用記錄標頭。\n🔍 \u0026ndash;log-file, \u0026ndash;lf 是否生成日誌文件。\n🔍 \u0026ndash;no-color 禁用顏色輸出。\n🔍 \u0026ndash;elapsed-time, \u0026ndash;et 顯示每個操作之間經過的時間。\n🔍 \u0026ndash;verbose, -v \u0026lt;integer\u0026gt; 將詳細程度從 0 設置為 5。\n$ qob --verbose 4 [COMMAND] 🔍 \u0026ndash;version 顯示版本號。\n🔍 \u0026ndash;help 顯示幫助。\n","description":" 🚩 創建 🔍 qob create cl-project 🚩 核心 🔍 qob init 🔍 qob info 🔍 qob status 🔍 qob install-deps 🔍 qob install 🔍 qob uninstall 🔍 qob package 🔍 qob files 🚩 執行 🔍 qob load 🔍 qob exec 🔍 qob eval 🚩 管理 🔍 qob dists 🔍 qob install-dists 🔍 qob search 🔍 qob list 🚩 連結 🔍 qob link add 🔍 qob link delete 🔍 qob link list 🚩 清潔 🔍 qob clean workspace 🔍 qob clean dist 🔍 qob clean all 🚩 實用工具 🔍 qob locate 🚩 全域選項 🔍 \u0026ndash;global, -g 🔍 \u0026ndash;all, -a 🔍 \u0026ndash;allow-error 🔍 \u0026ndash;timestamps 🔍 \u0026ndash;log-level 🔍 \u0026ndash;log-file, \u0026ndash;lf 🔍 \u0026ndash;no-color 🔍 \u0026ndash;elapsed-time, \u0026ndash;et 🔍 \u0026ndash;verbose, -v \u0026lt;integer\u0026gt; 🔍 \u0026ndash;version 🔍 \u0026ndash;help qob 程式的一般語法為\n"},{"id":11,"href":"/zh-tw/Examples/","title":"範例","parent":"","content":"","description":""},{"id":12,"href":"/zh-tw/Getting-Started/Directory-Structure/","title":"🏗️ 目錄結構","parent":"開始使用","content":" 📂 目錄結構說明 從指令列執行 qob create cl-project \u0026lt;project-name\u0026gt; 產生器，將會建立具有下列結構的目錄：\n. ├─ .gitignore ├─ {package-name}.asd ├─ README.markdown ├─ README.org ├─ src │ └─ main.lisp └─ tests └─ main.lisp 📂 目錄結構說明 如需詳細資訊，請參閱 https://github.com/fukamachi/cl-project。\n","description":" 📂 目錄結構說明 從指令列執行 qob create cl-project \u0026lt;project-name\u0026gt; 產生器，將會建立具有下列結構的目錄：\n. ├─ .gitignore ├─ {package-name}.asd ├─ README.markdown ├─ README.org ├─ src │ └─ main.lisp └─ tests └─ main.lisp 📂 目錄結構說明 如需詳細資訊，請參閱 https://github.com/fukamachi/cl-project。\n"},{"id":13,"href":"/zh-tw/Getting-Started/Advanced-Usage/","title":"🔧 進階用法","parent":"開始使用","content":" 🪝 Hooks Qob 只是一個普通的 Common Lisp 文件，應該從 Lisp 實踐本身讀取！ 你可以做：\n; 常規 Qob 文件內容... (setq qob-enable-color t) ; 顯示顏色 🪝 Hooks qob 提供了一些 hooks，使您能夠在每個命令之前和之後執行代碼。 hook 看起來像這樣：\nqob-before-COMMAND-hook qob-after-COMMAND-hook 例如，在使用命令 qob build 進行建構時執行某些任務：\n(qob-add-hook \u0026#39;qob-after-build-hook (lambda () ;; Do tasks after build )) 或者在每個命令上運行的 hooks：\nqob-before-command-hook qob-after-command-hook (qob-add-hook \u0026#39;qob-before-command-hook (lambda () (format T \u0026#34;~A\u0026#34; (qob-command)))) ; print the current command 對於包含空格的子命令，將與/連接：\n$ qob clean workspace # clean/workspace $ qob create cl-project # create/cl-project 所以，\n(qob-add-hook \u0026#39;qob-before-clean/workspace-hook (lambda () ;; 在 clean workspace 之前做一些事情... )) ","description":" 🪝 Hooks Qob 只是一個普通的 Common Lisp 文件，應該從 Lisp 實踐本身讀取！ 你可以做：\n; 常規 Qob 文件內容... (setq qob-enable-color t) ; 顯示顏色 🪝 Hooks qob 提供了一些 hooks，使您能夠在每個命令之前和之後執行代碼。 hook 看起來像這樣：\nqob-before-COMMAND-hook qob-after-COMMAND-hook 例如，在使用命令 qob build 進行建構時執行某些任務：\n(qob-add-hook \u0026#39;qob-after-build-hook (lambda () ;; Do tasks after build )) 或者在每個命令上運行的 hooks：\nqob-before-command-hook qob-after-command-hook (qob-add-hook \u0026#39;qob-before-command-hook (lambda () (format T \u0026#34;~A\u0026#34; (qob-command)))) ; print the current command 對於包含空格的子命令，將與/連接：\n"},{"id":14,"href":"/zh-tw/Contributing/","title":"貢獻","parent":"","content":"","description":""},{"id":15,"href":"/zh-tw/FAQ/","title":"常見問題","parent":"","content":"以下是一般常見問題列表。\n🔍 關於 Qob ❓ 誰應該使用這個工具？ ❓ 我在哪裡可以下載 Qob snapshot？ 🔍 技術選擇 ❓ 為什麼選擇 clingon? 🔍 關於 Qob ❓ 誰應該使用這個工具？ 這是我們的建議； 如果您打算使用特定於操作系統的軟件包（從不去其他平台），去尋找其他工具。 另一方面，Qob 旨在提供每個操作系統之間的最佳一致性。 或者，如果你想學習一個隨處可用的 工具，Qob 是最好的選擇之一。\n❓ 我在哪裡可以下載 Qob snapshot？ 您可以在我們的網站下載最新的可執行文件 (snapshot) cl-qob/binaries 代碼庫!\n🔍 技術選擇 ❓ 為什麼選擇 clingon? Common Lisp 的命令列解析器選項有限、所以我選擇了最成熟的，也是社群推薦的。\n","description":"以下是一般常見問題列表。\n🔍 關於 Qob ❓ 誰應該使用這個工具？ ❓ 我在哪裡可以下載 Qob snapshot？ 🔍 技術選擇 ❓ 為什麼選擇 clingon? 🔍 關於 Qob ❓ 誰應該使用這個工具？ 這是我們的建議； 如果您打算使用特定於操作系統的軟件包（從不去其他平台），去尋找其他工具。 另一方面，Qob 旨在提供每個操作系統之間的最佳一致性。 或者，如果你想學習一個隨處可用的 工具，Qob 是最好的選擇之一。\n❓ 我在哪裡可以下載 Qob snapshot？ 您可以在我們的網站下載最新的可執行文件 (snapshot) cl-qob/binaries 代碼庫!\n"},{"id":16,"href":"/zh-tw/License/","title":"MIT授權條款","parent":"","content":"在 MIT 下獲得許可。詳情見下文。\nCopyright (c) 2024-2025 Jen-Chieh Shen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026#34;Software\u0026#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u0026#34;AS IS\u0026#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ","description":"在 MIT 下獲得許可。詳情見下文。\nCopyright (c) 2024-2025 Jen-Chieh Shen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026#34;Software\u0026#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u0026#34;AS IS\u0026#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. "},{"id":17,"href":"/zh-tw/","title":"","parent":"","content":" CLI 建立, 執行, 測試, 和管理你的 Common Lisp 依賴 安裝 Qob 之後, 你就可以很輕鬆的開發任何 Common Lisp 包.\n開箱及用, Qob 支援 10+ 指令 來幫助整個你開發. 🔥\n開始使用 🏆 功能概述 ASDF 與 Quicklisp 整合 Qob 已整合 ASDF 和 Quicklisp\n初學者通常需要澄清 Common Lisp 中的套件管理。 內建的 ASDF 和 Quicklisp 可以幫助您開始運作。\n開箱及用 擁有最常用的設施，並追求最佳的使用者體驗。\nRoswell 和 Qlot 的替代方案 多合一工具讓使用者不再需要安裝 Roswell 和 Qlot 等工具， 這些工具只能達到特定目標。\n","description":" CLI 建立, 執行, 測試, 和管理你的 Common Lisp 依賴 安裝 Qob 之後, 你就可以很輕鬆的開發任何 Common Lisp 包.\n開箱及用, Qob 支援 10+ 指令 來幫助整個你開發. 🔥\n開始使用 🏆 功能概述 ASDF 與 Quicklisp 整合 Qob 已整合 ASDF 和 Quicklisp\n初學者通常需要澄清 Common Lisp 中的套件管理。 內建的 ASDF 和 Quicklisp 可以幫助您開始運作。\n開箱及用 擁有最常用的設施，並追求最佳的使用者體驗。\n"},{"id":18,"href":"/zh-tw/Contributing/How-to-Contribute/","title":"❓ 如何貢獻","parent":"貢獻","content":" ⚜️ 行為守則 🪑 開放發展 📌 語義版本控制 💡 分支機構 📂 項目狀況 ⚜️ 行為守則 我們採用了貢獻者公約 作為其行為準則，我們希望項目參與者遵守它。請閱讀全文，以便您了解將要執行的操作不容忍。\n🪑 開放發展 Qob 上的所有工作都直接在 GitHub 上進行。 核心團隊成員和外部貢獻者都發送 PR 通過相同的審查程序。\n📌 語義版本控制 Qob 遵循 語義版本控制。 我們發布補丁版本對於關鍵錯誤修復、 新功能的次要版本或非必要的更改，以及任何重大更改的主要版本。 當我們進行重大更改時，我們 還在次要版本中引入棄用警告，以便我們的用戶了解關於即將發生的變化並提前遷移他們的代碼。\n變更日誌文件 中記錄了每個重大變更。\n💡 分支機構 將所有更改直接提交到 master 分支。 我們不使用單獨的分支機構用於開發或即將發布的版本。 我們盡最大努力讓“主人”保持良好狀態，通過所有測試。\n落在 master 中的代碼必須與最新的穩定版本兼容。 它可能包含附加功能，但沒有重大更改。 我們應該能夠釋放隨時從 master 的提示中獲取一個新的次要版本。\n📂 項目狀況 該項目的基本框架已經完成，我們目前正在尋找貢獻者向我們提供反饋並改進此工具的 TUI/UX！\n我們也在尋求建議以增加更多。 Common Lisper 常用命令和選項，所以這些功能是默認准備的！\n","description":" ⚜️ 行為守則 🪑 開放發展 📌 語義版本控制 💡 分支機構 📂 項目狀況 ⚜️ 行為守則 我們採用了貢獻者公約 作為其行為準則，我們希望項目參與者遵守它。請閱讀全文，以便您了解將要執行的操作不容忍。\n🪑 開放發展 Qob 上的所有工作都直接在 GitHub 上進行。 核心團隊成員和外部貢獻者都發送 PR 通過相同的審查程序。\n📌 語義版本控制 Qob 遵循 語義版本控制。 我們發布補丁版本對於關鍵錯誤修復、 新功能的次要版本或非必要的更改，以及任何重大更改的主要版本。 當我們進行重大更改時，我們 還在次要版本中引入棄用警告，以便我們的用戶了解關於即將發生的變化並提前遷移他們的代碼。\n"},{"id":19,"href":"/zh-tw/Getting-Started/Introduction/","title":"🚪 介紹","parent":"開始使用","content":"Qob 嘗試在這些事情上做得很好：\n與 ASDF 及 Quicklisp 搭配使用。 像 Qlot 一樣支援專案本機，並支援全局範圍設施。 可在所有現代作業系統上運作： Linux、macOS和Windows。 我們的目標是讓 Qob 成為多合一的工具，讓使用者不再需要安裝 Roswell 和 Qlot 之類的工具，這些工具只能達到特定的目標。\n❓ 為什麼選擇 Qob？ 對於很多新手來說, 相比其他高階語言像是 Python, Rust, 等等. Common Lisp 的入門難度是相對算高的. 主要原因並不是因為 Common Lisp 這個語言本身有多難, 困難的地方通常是指它的語言環境, 工具鏈不齊全, 文檔太少或不完善, 網路搜尋時常無果, 等等其他疑難雜症.\nQob 嘗試解決環境不友善的問題. 像是如何建構執行檔, 應該呼叫那些函式 去做那些指令. 不需要進 Lisp 實踐 (ex: SBCL) 也能夠執行一系列的 Lisp 任務. 相比過去 eval 需要執行的函式, 使用 Qob 能讓你擁有更接近現代高階程式語言 的使用者體驗.\n📰 消息 請參考這.\n📝 TODO 事項列表 請參考這.\n📂 基礎項目 Qob 的設計深受以下項目的影響：\nRoswell - Common Lisp 環境設定公用程式 Qlot - Common Lisp 專案本機函式庫安裝程式 ","description":"Qob 嘗試在這些事情上做得很好：\n與 ASDF 及 Quicklisp 搭配使用。 像 Qlot 一樣支援專案本機，並支援全局範圍設施。 可在所有現代作業系統上運作： Linux、macOS和Windows。 我們的目標是讓 Qob 成為多合一的工具，讓使用者不再需要安裝 Roswell 和 Qlot 之類的工具，這些工具只能達到特定的目標。\n❓ 為什麼選擇 Qob？ 對於很多新手來說, 相比其他高階語言像是 Python, Rust, 等等. Common Lisp 的入門難度是相對算高的. 主要原因並不是因為 Common Lisp 這個語言本身有多難, 困難的地方通常是指它的語言環境, 工具鏈不齊全, 文檔太少或不完善, 網路搜尋時常無果, 等等其他疑難雜症.\nQob 嘗試解決環境不友善的問題. 像是如何建構執行檔, 應該呼叫那些函式 去做那些指令. 不需要進 Lisp 實踐 (ex: SBCL) 也能夠執行一系列的 Lisp 任務. 相比過去 eval 需要執行的函式, 使用 Qob 能讓你擁有更接近現代高階程式語言 的使用者體驗.\n"},{"id":20,"href":"/zh-tw/tags/","title":"Tags","parent":"","content":"","description":""},{"id":21,"href":"/zh-tw/tos/","title":"法律聲明和隱私","parent":"","content":" 聯繫信息 Jen-Chieh Shen Email: jcs090219@gmail.com\n隱私政策 一般數據和信息的收集 當數據主體或自動化系統調用該網站時，cl-qob.github.io 網站會收集一系列一般數據和信息。 這些一般數據和信息存儲在服務器日誌文件中。 收集的可能是：\n使用的瀏覽器類型和版本 訪問系統使用的操作系統 訪問系統訪問我們網站的網站（所謂的推薦人） 子網站 訪問網站的日期和時間 一個互聯網協議地址（IP地址） 接入系統的互聯網服務提供商 在我們的信息技術系統受到攻擊時可能會使用的任何其他類似數據和信息 使用這些一般數據和信息時，我們不會得出任何結論關於數據主體。 相反，需要此信息來提供正確瀏覽我們 網站的內容並回答您的要求 (Article 6.1b GDPR).\n由於分析，您的 IP 地址和請求的 URL 最多可存儲 7 天網頁可能出現的問題。 鑑於出現問題有在某些情 況下，此信息的存儲時間可能超過 7 天深入分析問題。 一經確認將立即刪除他們無法進一步幫助診斷問題 或解決問題。 (Article 6.1f GDPR).\nCookies 該網頁不使用任何 cookie。\n","description":" 聯繫信息 Jen-Chieh Shen Email: jcs090219@gmail.com\n隱私政策 一般數據和信息的收集 當數據主體或自動化系統調用該網站時，cl-qob.github.io 網站會收集一系列一般數據和信息。 這些一般數據和信息存儲在服務器日誌文件中。 收集的可能是：\n使用的瀏覽器類型和版本 訪問系統使用的操作系統 訪問系統訪問我們網站的網站（所謂的推薦人） 子網站 訪問網站的日期和時間 一個互聯網協議地址（IP地址） 接入系統的互聯網服務提供商 在我們的信息技術系統受到攻擊時可能會使用的任何其他類似數據和信息 使用這些一般數據和信息時，我們不會得出任何結論關於數據主體。 相反，需要此信息來提供正確瀏覽我們 網站的內容並回答您的要求 (Article 6.1b GDPR).\n由於分析，您的 IP 地址和請求的 URL 最多可存儲 7 天網頁可能出現的問題。 鑑於出現問題有在某些情 況下，此信息的存儲時間可能超過 7 天深入分析問題。 一經確認將立即刪除他們無法進一步幫助診斷問題 或解決問題。 (Article 6.1f GDPR).\nCookies 該網頁不使用任何 cookie。\n"}]